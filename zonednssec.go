// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package cfrex

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"time"

	"github.com/rexscaria/api-schemas/internal/apijson"
	"github.com/rexscaria/api-schemas/internal/param"
	"github.com/rexscaria/api-schemas/internal/requestconfig"
	"github.com/rexscaria/api-schemas/option"
)

// ZoneDnssecService contains methods and other services that help with interacting
// with the cf-rex API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewZoneDnssecService] method instead.
type ZoneDnssecService struct {
	Options []option.RequestOption
}

// NewZoneDnssecService generates a new service that applies the given options to
// each request. These options are applied after the parent client's options (if
// there is one), and before any request-specific options.
func NewZoneDnssecService(opts ...option.RequestOption) (r *ZoneDnssecService) {
	r = &ZoneDnssecService{}
	r.Options = opts
	return
}

// Details about DNSSEC status and configuration.
func (r *ZoneDnssecService) Get(ctx context.Context, zoneID string, opts ...option.RequestOption) (res *DnssecResponse, err error) {
	opts = append(r.Options[:], opts...)
	if zoneID == "" {
		err = errors.New("missing required zone_id parameter")
		return
	}
	path := fmt.Sprintf("zones/%s/dnssec", zoneID)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, nil, &res, opts...)
	return
}

// Enable or disable DNSSEC.
func (r *ZoneDnssecService) Update(ctx context.Context, zoneID string, body ZoneDnssecUpdateParams, opts ...option.RequestOption) (res *DnssecResponse, err error) {
	opts = append(r.Options[:], opts...)
	if zoneID == "" {
		err = errors.New("missing required zone_id parameter")
		return
	}
	path := fmt.Sprintf("zones/%s/dnssec", zoneID)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPatch, path, body, &res, opts...)
	return
}

// Delete DNSSEC.
func (r *ZoneDnssecService) Delete(ctx context.Context, zoneID string, body ZoneDnssecDeleteParams, opts ...option.RequestOption) (res *ZoneDnssecDeleteResponse, err error) {
	opts = append(r.Options[:], opts...)
	if zoneID == "" {
		err = errors.New("missing required zone_id parameter")
		return
	}
	path := fmt.Sprintf("zones/%s/dnssec", zoneID)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodDelete, path, body, &res, opts...)
	return
}

type DnssecMessageItem struct {
	Code    int64                 `json:"code,required"`
	Message string                `json:"message,required"`
	JSON    dnssecMessageItemJSON `json:"-"`
}

// dnssecMessageItemJSON contains the JSON metadata for the struct
// [DnssecMessageItem]
type dnssecMessageItemJSON struct {
	Code        apijson.Field
	Message     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *DnssecMessageItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r dnssecMessageItemJSON) RawJSON() string {
	return r.raw
}

type DnssecResponse struct {
	Result DnssecResponseResult `json:"result"`
	JSON   dnssecResponseJSON   `json:"-"`
	SingleResponseDnssec
}

// dnssecResponseJSON contains the JSON metadata for the struct [DnssecResponse]
type dnssecResponseJSON struct {
	Result      apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *DnssecResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r dnssecResponseJSON) RawJSON() string {
	return r.raw
}

type DnssecResponseResult struct {
	// Algorithm key code.
	Algorithm string `json:"algorithm,nullable"`
	// Digest hash.
	Digest string `json:"digest,nullable"`
	// Type of digest algorithm.
	DigestAlgorithm string `json:"digest_algorithm,nullable"`
	// Coded type for digest algorithm.
	DigestType string `json:"digest_type,nullable"`
	// If true, multi-signer DNSSEC is enabled on the zone, allowing multiple providers
	// to serve a DNSSEC-signed zone at the same time. This is required for DNSKEY
	// records (except those automatically generated by Cloudflare) to be added to the
	// zone.
	//
	// See
	// [Multi-signer DNSSEC](https://developers.cloudflare.com/dns/dnssec/multi-signer-dnssec/)
	// for details.
	DnssecMultiSigner bool `json:"dnssec_multi_signer"`
	// If true, allows Cloudflare to transfer in a DNSSEC-signed zone including
	// signatures from an external provider, without requiring Cloudflare to sign any
	// records on the fly.
	//
	// Note that this feature has some limitations. See
	// [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec)
	// for details.
	DnssecPresigned bool `json:"dnssec_presigned"`
	// Full DS record.
	Ds string `json:"ds,nullable"`
	// Flag for DNSSEC record.
	Flags float64 `json:"flags,nullable"`
	// Code for key tag.
	KeyTag float64 `json:"key_tag,nullable"`
	// Algorithm key type.
	KeyType string `json:"key_type,nullable"`
	// When DNSSEC was last modified.
	ModifiedOn time.Time `json:"modified_on,nullable" format:"date-time"`
	// Public key for DS record.
	PublicKey string `json:"public_key,nullable"`
	// Status of DNSSEC, based on user-desired state and presence of necessary records.
	Status DnssecResponseResultStatus `json:"status"`
	JSON   dnssecResponseResultJSON   `json:"-"`
}

// dnssecResponseResultJSON contains the JSON metadata for the struct
// [DnssecResponseResult]
type dnssecResponseResultJSON struct {
	Algorithm         apijson.Field
	Digest            apijson.Field
	DigestAlgorithm   apijson.Field
	DigestType        apijson.Field
	DnssecMultiSigner apijson.Field
	DnssecPresigned   apijson.Field
	Ds                apijson.Field
	Flags             apijson.Field
	KeyTag            apijson.Field
	KeyType           apijson.Field
	ModifiedOn        apijson.Field
	PublicKey         apijson.Field
	Status            apijson.Field
	raw               string
	ExtraFields       map[string]apijson.Field
}

func (r *DnssecResponseResult) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r dnssecResponseResultJSON) RawJSON() string {
	return r.raw
}

// Status of DNSSEC, based on user-desired state and presence of necessary records.
type DnssecResponseResultStatus string

const (
	DnssecResponseResultStatusActive          DnssecResponseResultStatus = "active"
	DnssecResponseResultStatusPending         DnssecResponseResultStatus = "pending"
	DnssecResponseResultStatusDisabled        DnssecResponseResultStatus = "disabled"
	DnssecResponseResultStatusPendingDisabled DnssecResponseResultStatus = "pending-disabled"
	DnssecResponseResultStatusError           DnssecResponseResultStatus = "error"
)

func (r DnssecResponseResultStatus) IsKnown() bool {
	switch r {
	case DnssecResponseResultStatusActive, DnssecResponseResultStatusPending, DnssecResponseResultStatusDisabled, DnssecResponseResultStatusPendingDisabled, DnssecResponseResultStatusError:
		return true
	}
	return false
}

type SingleResponseDnssec struct {
	Errors   []DnssecMessageItem `json:"errors,required"`
	Messages []DnssecMessageItem `json:"messages,required"`
	// Whether the API call was successful
	Success SingleResponseDnssecSuccess `json:"success,required"`
	JSON    singleResponseDnssecJSON    `json:"-"`
}

// singleResponseDnssecJSON contains the JSON metadata for the struct
// [SingleResponseDnssec]
type singleResponseDnssecJSON struct {
	Errors      apijson.Field
	Messages    apijson.Field
	Success     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *SingleResponseDnssec) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r singleResponseDnssecJSON) RawJSON() string {
	return r.raw
}

// Whether the API call was successful
type SingleResponseDnssecSuccess bool

const (
	SingleResponseDnssecSuccessTrue SingleResponseDnssecSuccess = true
)

func (r SingleResponseDnssecSuccess) IsKnown() bool {
	switch r {
	case SingleResponseDnssecSuccessTrue:
		return true
	}
	return false
}

type ZoneDnssecDeleteResponse struct {
	Result string                       `json:"result"`
	JSON   zoneDnssecDeleteResponseJSON `json:"-"`
	SingleResponseDnssec
}

// zoneDnssecDeleteResponseJSON contains the JSON metadata for the struct
// [ZoneDnssecDeleteResponse]
type zoneDnssecDeleteResponseJSON struct {
	Result      apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *ZoneDnssecDeleteResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r zoneDnssecDeleteResponseJSON) RawJSON() string {
	return r.raw
}

type ZoneDnssecUpdateParams struct {
	// If true, multi-signer DNSSEC is enabled on the zone, allowing multiple providers
	// to serve a DNSSEC-signed zone at the same time. This is required for DNSKEY
	// records (except those automatically generated by Cloudflare) to be added to the
	// zone.
	//
	// See
	// [Multi-signer DNSSEC](https://developers.cloudflare.com/dns/dnssec/multi-signer-dnssec/)
	// for details.
	DnssecMultiSigner param.Field[bool] `json:"dnssec_multi_signer"`
	// If true, allows Cloudflare to transfer in a DNSSEC-signed zone including
	// signatures from an external provider, without requiring Cloudflare to sign any
	// records on the fly.
	//
	// Note that this feature has some limitations. See
	// [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec)
	// for details.
	DnssecPresigned param.Field[bool] `json:"dnssec_presigned"`
	// Status of DNSSEC, based on user-desired state and presence of necessary records.
	Status param.Field[ZoneDnssecUpdateParamsStatus] `json:"status"`
}

func (r ZoneDnssecUpdateParams) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Status of DNSSEC, based on user-desired state and presence of necessary records.
type ZoneDnssecUpdateParamsStatus string

const (
	ZoneDnssecUpdateParamsStatusActive   ZoneDnssecUpdateParamsStatus = "active"
	ZoneDnssecUpdateParamsStatusDisabled ZoneDnssecUpdateParamsStatus = "disabled"
)

func (r ZoneDnssecUpdateParamsStatus) IsKnown() bool {
	switch r {
	case ZoneDnssecUpdateParamsStatusActive, ZoneDnssecUpdateParamsStatusDisabled:
		return true
	}
	return false
}

type ZoneDnssecDeleteParams struct {
	Body interface{} `json:"body,required"`
}

func (r ZoneDnssecDeleteParams) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r.Body)
}
