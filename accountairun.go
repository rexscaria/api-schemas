// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package cfrex

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"mime/multipart"
	"net/http"
	"reflect"

	"github.com/rexscaria/api-schemas/internal/apiform"
	"github.com/rexscaria/api-schemas/internal/apijson"
	"github.com/rexscaria/api-schemas/internal/param"
	"github.com/rexscaria/api-schemas/internal/requestconfig"
	"github.com/rexscaria/api-schemas/option"
	"github.com/rexscaria/api-schemas/shared"
	"github.com/tidwall/gjson"
)

// AccountAIRunService contains methods and other services that help with
// interacting with the cf-rex API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewAccountAIRunService] method instead.
type AccountAIRunService struct {
	Options []option.RequestOption
	Cf      *AccountAIRunCfService
	Hf      *AccountAIRunHfService
}

// NewAccountAIRunService generates a new service that applies the given options to
// each request. These options are applied after the parent client's options (if
// there is one), and before any request-specific options.
func NewAccountAIRunService(opts ...option.RequestOption) (r *AccountAIRunService) {
	r = &AccountAIRunService{}
	r.Options = opts
	r.Cf = NewAccountAIRunCfService(opts...)
	r.Hf = NewAccountAIRunHfService(opts...)
	return
}

// This endpoint provides users with the capability to run specific AI models
// on-demand.
//
// By submitting the required input data, users can receive real-time predictions
// or results generated by the chosen AI model. The endpoint supports various AI
// model types, ensuring flexibility and adaptability for diverse use cases.
//
// Model specific inputs available in
// [Cloudflare Docs](https://developers.cloudflare.com/workers-ai/models/).
func (r *AccountAIRunService) ExecuteModel(ctx context.Context, accountID string, modelName string, body AccountAIRunExecuteModelParams, opts ...option.RequestOption) (res *AccountAIRunExecuteModelResponse, err error) {
	opts = append(r.Options[:], opts...)
	if accountID == "" {
		err = errors.New("missing required account_id parameter")
		return
	}
	if modelName == "" {
		err = errors.New("missing required model_name parameter")
		return
	}
	path := fmt.Sprintf("accounts/%s/ai/run/%s", accountID, modelName)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

type AccountAIRunExecuteModelResponse struct {
	// An array of classification results for the input text
	Result AccountAIRunExecuteModelResponseResultUnion `json:"result" format:"binary"`
	JSON   accountAIRunExecuteModelResponseJSON        `json:"-"`
}

// accountAIRunExecuteModelResponseJSON contains the JSON metadata for the struct
// [AccountAIRunExecuteModelResponse]
type accountAIRunExecuteModelResponseJSON struct {
	Result      apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *AccountAIRunExecuteModelResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r accountAIRunExecuteModelResponseJSON) RawJSON() string {
	return r.raw
}

// An array of classification results for the input text
//
// Union satisfied by [AccountAIRunExecuteModelResponseResultTextClassification],
// [shared.UnionString], [AccountAIRunExecuteModelResponseResultAudio],
// [AccountAIRunExecuteModelResponseResultTextEmbeddings],
// [AccountAIRunExecuteModelResponseResultAutomaticSpeechRecognition],
// [AccountAIRunExecuteModelResponseResultImageClassification],
// [AccountAIRunExecuteModelResponseResultObjectDetection],
// [AccountAIRunExecuteModelResponseResultObject],
// [AccountAIRunExecuteModelResponseResultTranslation],
// [AccountAIRunExecuteModelResponseResultSummarization],
// [AccountAIRunExecuteModelResponseResultImageToText] or
// [AccountAIRunExecuteModelResponseResultImageTextToText].
type AccountAIRunExecuteModelResponseResultUnion interface {
	ImplementsAccountAIRunExecuteModelResponseResultUnion()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*AccountAIRunExecuteModelResponseResultUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(AccountAIRunExecuteModelResponseResultTextClassification{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.String,
			Type:       reflect.TypeOf(shared.UnionString("")),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(AccountAIRunExecuteModelResponseResultAudio{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(AccountAIRunExecuteModelResponseResultTextEmbeddings{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(AccountAIRunExecuteModelResponseResultAutomaticSpeechRecognition{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(AccountAIRunExecuteModelResponseResultImageClassification{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(AccountAIRunExecuteModelResponseResultObjectDetection{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(AccountAIRunExecuteModelResponseResultObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(AccountAIRunExecuteModelResponseResultTranslation{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(AccountAIRunExecuteModelResponseResultSummarization{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(AccountAIRunExecuteModelResponseResultImageToText{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(AccountAIRunExecuteModelResponseResultImageTextToText{}),
		},
	)
}

type AccountAIRunExecuteModelResponseResultTextClassification []AccountAIRunExecuteModelResponseResultTextClassificationItem

func (r AccountAIRunExecuteModelResponseResultTextClassification) ImplementsAccountAIRunExecuteModelResponseResultUnion() {
}

type AccountAIRunExecuteModelResponseResultTextClassificationItem struct {
	// The classification label assigned to the text (e.g., 'POSITIVE' or 'NEGATIVE')
	Label string `json:"label"`
	// Confidence score indicating the likelihood that the text belongs to the
	// specified label
	Score float64                                                          `json:"score"`
	JSON  accountAIRunExecuteModelResponseResultTextClassificationItemJSON `json:"-"`
}

// accountAIRunExecuteModelResponseResultTextClassificationItemJSON contains the
// JSON metadata for the struct
// [AccountAIRunExecuteModelResponseResultTextClassificationItem]
type accountAIRunExecuteModelResponseResultTextClassificationItemJSON struct {
	Label       apijson.Field
	Score       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *AccountAIRunExecuteModelResponseResultTextClassificationItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r accountAIRunExecuteModelResponseResultTextClassificationItemJSON) RawJSON() string {
	return r.raw
}

type AccountAIRunExecuteModelResponseResultAudio struct {
	// The generated audio in MP3 format, base64-encoded
	Audio string                                          `json:"audio"`
	JSON  accountAIRunExecuteModelResponseResultAudioJSON `json:"-"`
}

// accountAIRunExecuteModelResponseResultAudioJSON contains the JSON metadata for
// the struct [AccountAIRunExecuteModelResponseResultAudio]
type accountAIRunExecuteModelResponseResultAudioJSON struct {
	Audio       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *AccountAIRunExecuteModelResponseResultAudio) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r accountAIRunExecuteModelResponseResultAudioJSON) RawJSON() string {
	return r.raw
}

func (r AccountAIRunExecuteModelResponseResultAudio) ImplementsAccountAIRunExecuteModelResponseResultUnion() {
}

type AccountAIRunExecuteModelResponseResultTextEmbeddings struct {
	// Embeddings of the requested text values
	Data  [][]float64                                              `json:"data"`
	Shape []float64                                                `json:"shape"`
	JSON  accountAIRunExecuteModelResponseResultTextEmbeddingsJSON `json:"-"`
}

// accountAIRunExecuteModelResponseResultTextEmbeddingsJSON contains the JSON
// metadata for the struct [AccountAIRunExecuteModelResponseResultTextEmbeddings]
type accountAIRunExecuteModelResponseResultTextEmbeddingsJSON struct {
	Data        apijson.Field
	Shape       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *AccountAIRunExecuteModelResponseResultTextEmbeddings) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r accountAIRunExecuteModelResponseResultTextEmbeddingsJSON) RawJSON() string {
	return r.raw
}

func (r AccountAIRunExecuteModelResponseResultTextEmbeddings) ImplementsAccountAIRunExecuteModelResponseResultUnion() {
}

type AccountAIRunExecuteModelResponseResultAutomaticSpeechRecognition struct {
	// The transcription
	Text      string                                                                 `json:"text,required"`
	Vtt       string                                                                 `json:"vtt"`
	WordCount float64                                                                `json:"word_count"`
	Words     []AccountAIRunExecuteModelResponseResultAutomaticSpeechRecognitionWord `json:"words"`
	JSON      accountAIRunExecuteModelResponseResultAutomaticSpeechRecognitionJSON   `json:"-"`
}

// accountAIRunExecuteModelResponseResultAutomaticSpeechRecognitionJSON contains
// the JSON metadata for the struct
// [AccountAIRunExecuteModelResponseResultAutomaticSpeechRecognition]
type accountAIRunExecuteModelResponseResultAutomaticSpeechRecognitionJSON struct {
	Text        apijson.Field
	Vtt         apijson.Field
	WordCount   apijson.Field
	Words       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *AccountAIRunExecuteModelResponseResultAutomaticSpeechRecognition) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r accountAIRunExecuteModelResponseResultAutomaticSpeechRecognitionJSON) RawJSON() string {
	return r.raw
}

func (r AccountAIRunExecuteModelResponseResultAutomaticSpeechRecognition) ImplementsAccountAIRunExecuteModelResponseResultUnion() {
}

type AccountAIRunExecuteModelResponseResultAutomaticSpeechRecognitionWord struct {
	// The ending second when the word completes
	End float64 `json:"end"`
	// The second this word begins in the recording
	Start float64                                                                  `json:"start"`
	Word  string                                                                   `json:"word"`
	JSON  accountAIRunExecuteModelResponseResultAutomaticSpeechRecognitionWordJSON `json:"-"`
}

// accountAIRunExecuteModelResponseResultAutomaticSpeechRecognitionWordJSON
// contains the JSON metadata for the struct
// [AccountAIRunExecuteModelResponseResultAutomaticSpeechRecognitionWord]
type accountAIRunExecuteModelResponseResultAutomaticSpeechRecognitionWordJSON struct {
	End         apijson.Field
	Start       apijson.Field
	Word        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *AccountAIRunExecuteModelResponseResultAutomaticSpeechRecognitionWord) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r accountAIRunExecuteModelResponseResultAutomaticSpeechRecognitionWordJSON) RawJSON() string {
	return r.raw
}

type AccountAIRunExecuteModelResponseResultImageClassification []AccountAIRunExecuteModelResponseResultImageClassificationItem

func (r AccountAIRunExecuteModelResponseResultImageClassification) ImplementsAccountAIRunExecuteModelResponseResultUnion() {
}

type AccountAIRunExecuteModelResponseResultImageClassificationItem struct {
	// The predicted category or class for the input image based on analysis
	Label string `json:"label"`
	// A confidence value, between 0 and 1, indicating how certain the model is about
	// the predicted label
	Score float64                                                           `json:"score"`
	JSON  accountAIRunExecuteModelResponseResultImageClassificationItemJSON `json:"-"`
}

// accountAIRunExecuteModelResponseResultImageClassificationItemJSON contains the
// JSON metadata for the struct
// [AccountAIRunExecuteModelResponseResultImageClassificationItem]
type accountAIRunExecuteModelResponseResultImageClassificationItemJSON struct {
	Label       apijson.Field
	Score       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *AccountAIRunExecuteModelResponseResultImageClassificationItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r accountAIRunExecuteModelResponseResultImageClassificationItemJSON) RawJSON() string {
	return r.raw
}

type AccountAIRunExecuteModelResponseResultObjectDetection []AccountAIRunExecuteModelResponseResultObjectDetectionItem

func (r AccountAIRunExecuteModelResponseResultObjectDetection) ImplementsAccountAIRunExecuteModelResponseResultUnion() {
}

type AccountAIRunExecuteModelResponseResultObjectDetectionItem struct {
	// Coordinates defining the bounding box around the detected object
	Box AccountAIRunExecuteModelResponseResultObjectDetectionBox `json:"box"`
	// The class label or name of the detected object
	Label string `json:"label"`
	// Confidence score indicating the likelihood that the detection is correct
	Score float64                                                       `json:"score"`
	JSON  accountAIRunExecuteModelResponseResultObjectDetectionItemJSON `json:"-"`
}

// accountAIRunExecuteModelResponseResultObjectDetectionItemJSON contains the JSON
// metadata for the struct
// [AccountAIRunExecuteModelResponseResultObjectDetectionItem]
type accountAIRunExecuteModelResponseResultObjectDetectionItemJSON struct {
	Box         apijson.Field
	Label       apijson.Field
	Score       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *AccountAIRunExecuteModelResponseResultObjectDetectionItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r accountAIRunExecuteModelResponseResultObjectDetectionItemJSON) RawJSON() string {
	return r.raw
}

// Coordinates defining the bounding box around the detected object
type AccountAIRunExecuteModelResponseResultObjectDetectionBox struct {
	// The x-coordinate of the bottom-right corner of the bounding box
	Xmax float64 `json:"xmax"`
	// The x-coordinate of the top-left corner of the bounding box
	Xmin float64 `json:"xmin"`
	// The y-coordinate of the bottom-right corner of the bounding box
	Ymax float64 `json:"ymax"`
	// The y-coordinate of the top-left corner of the bounding box
	Ymin float64                                                      `json:"ymin"`
	JSON accountAIRunExecuteModelResponseResultObjectDetectionBoxJSON `json:"-"`
}

// accountAIRunExecuteModelResponseResultObjectDetectionBoxJSON contains the JSON
// metadata for the struct
// [AccountAIRunExecuteModelResponseResultObjectDetectionBox]
type accountAIRunExecuteModelResponseResultObjectDetectionBoxJSON struct {
	Xmax        apijson.Field
	Xmin        apijson.Field
	Ymax        apijson.Field
	Ymin        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *AccountAIRunExecuteModelResponseResultObjectDetectionBox) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r accountAIRunExecuteModelResponseResultObjectDetectionBoxJSON) RawJSON() string {
	return r.raw
}

type AccountAIRunExecuteModelResponseResultObject struct {
	// The generated text response from the model
	Response string `json:"response,required"`
	// An array of tool calls requests made during the response generation
	ToolCalls []AccountAIRunExecuteModelResponseResultObjectToolCall `json:"tool_calls"`
	// Usage statistics for the inference request
	Usage AccountAIRunExecuteModelResponseResultObjectUsage `json:"usage"`
	JSON  accountAIRunExecuteModelResponseResultObjectJSON  `json:"-"`
}

// accountAIRunExecuteModelResponseResultObjectJSON contains the JSON metadata for
// the struct [AccountAIRunExecuteModelResponseResultObject]
type accountAIRunExecuteModelResponseResultObjectJSON struct {
	Response    apijson.Field
	ToolCalls   apijson.Field
	Usage       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *AccountAIRunExecuteModelResponseResultObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r accountAIRunExecuteModelResponseResultObjectJSON) RawJSON() string {
	return r.raw
}

func (r AccountAIRunExecuteModelResponseResultObject) ImplementsAccountAIRunExecuteModelResponseResultUnion() {
}

type AccountAIRunExecuteModelResponseResultObjectToolCall struct {
	// The arguments passed to be passed to the tool call request
	Arguments interface{} `json:"arguments"`
	// The name of the tool to be called
	Name string                                                   `json:"name"`
	JSON accountAIRunExecuteModelResponseResultObjectToolCallJSON `json:"-"`
}

// accountAIRunExecuteModelResponseResultObjectToolCallJSON contains the JSON
// metadata for the struct [AccountAIRunExecuteModelResponseResultObjectToolCall]
type accountAIRunExecuteModelResponseResultObjectToolCallJSON struct {
	Arguments   apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *AccountAIRunExecuteModelResponseResultObjectToolCall) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r accountAIRunExecuteModelResponseResultObjectToolCallJSON) RawJSON() string {
	return r.raw
}

// Usage statistics for the inference request
type AccountAIRunExecuteModelResponseResultObjectUsage struct {
	// Total number of tokens in output
	CompletionTokens float64 `json:"completion_tokens"`
	// Total number of tokens in input
	PromptTokens float64 `json:"prompt_tokens"`
	// Total number of input and output tokens
	TotalTokens float64                                               `json:"total_tokens"`
	JSON        accountAIRunExecuteModelResponseResultObjectUsageJSON `json:"-"`
}

// accountAIRunExecuteModelResponseResultObjectUsageJSON contains the JSON metadata
// for the struct [AccountAIRunExecuteModelResponseResultObjectUsage]
type accountAIRunExecuteModelResponseResultObjectUsageJSON struct {
	CompletionTokens apijson.Field
	PromptTokens     apijson.Field
	TotalTokens      apijson.Field
	raw              string
	ExtraFields      map[string]apijson.Field
}

func (r *AccountAIRunExecuteModelResponseResultObjectUsage) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r accountAIRunExecuteModelResponseResultObjectUsageJSON) RawJSON() string {
	return r.raw
}

type AccountAIRunExecuteModelResponseResultTranslation struct {
	// The translated text in the target language
	TranslatedText string                                                `json:"translated_text"`
	JSON           accountAIRunExecuteModelResponseResultTranslationJSON `json:"-"`
}

// accountAIRunExecuteModelResponseResultTranslationJSON contains the JSON metadata
// for the struct [AccountAIRunExecuteModelResponseResultTranslation]
type accountAIRunExecuteModelResponseResultTranslationJSON struct {
	TranslatedText apijson.Field
	raw            string
	ExtraFields    map[string]apijson.Field
}

func (r *AccountAIRunExecuteModelResponseResultTranslation) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r accountAIRunExecuteModelResponseResultTranslationJSON) RawJSON() string {
	return r.raw
}

func (r AccountAIRunExecuteModelResponseResultTranslation) ImplementsAccountAIRunExecuteModelResponseResultUnion() {
}

type AccountAIRunExecuteModelResponseResultSummarization struct {
	// The summarized version of the input text
	Summary string                                                  `json:"summary"`
	JSON    accountAIRunExecuteModelResponseResultSummarizationJSON `json:"-"`
}

// accountAIRunExecuteModelResponseResultSummarizationJSON contains the JSON
// metadata for the struct [AccountAIRunExecuteModelResponseResultSummarization]
type accountAIRunExecuteModelResponseResultSummarizationJSON struct {
	Summary     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *AccountAIRunExecuteModelResponseResultSummarization) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r accountAIRunExecuteModelResponseResultSummarizationJSON) RawJSON() string {
	return r.raw
}

func (r AccountAIRunExecuteModelResponseResultSummarization) ImplementsAccountAIRunExecuteModelResponseResultUnion() {
}

type AccountAIRunExecuteModelResponseResultImageToText struct {
	Description string                                                `json:"description"`
	JSON        accountAIRunExecuteModelResponseResultImageToTextJSON `json:"-"`
}

// accountAIRunExecuteModelResponseResultImageToTextJSON contains the JSON metadata
// for the struct [AccountAIRunExecuteModelResponseResultImageToText]
type accountAIRunExecuteModelResponseResultImageToTextJSON struct {
	Description apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *AccountAIRunExecuteModelResponseResultImageToText) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r accountAIRunExecuteModelResponseResultImageToTextJSON) RawJSON() string {
	return r.raw
}

func (r AccountAIRunExecuteModelResponseResultImageToText) ImplementsAccountAIRunExecuteModelResponseResultUnion() {
}

type AccountAIRunExecuteModelResponseResultImageTextToText struct {
	Description string                                                    `json:"description"`
	JSON        accountAIRunExecuteModelResponseResultImageTextToTextJSON `json:"-"`
}

// accountAIRunExecuteModelResponseResultImageTextToTextJSON contains the JSON
// metadata for the struct [AccountAIRunExecuteModelResponseResultImageTextToText]
type accountAIRunExecuteModelResponseResultImageTextToTextJSON struct {
	Description apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *AccountAIRunExecuteModelResponseResultImageTextToText) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r accountAIRunExecuteModelResponseResultImageTextToTextJSON) RawJSON() string {
	return r.raw
}

func (r AccountAIRunExecuteModelResponseResultImageTextToText) ImplementsAccountAIRunExecuteModelResponseResultUnion() {
}

type AccountAIRunExecuteModelParams struct {
	Body AccountAIRunExecuteModelParamsBodyUnion `json:"body" format:"binary"`
}

func (r AccountAIRunExecuteModelParams) MarshalMultipart() (data []byte, contentType string, err error) {
	buf := bytes.NewBuffer(nil)
	writer := multipart.NewWriter(buf)
	err = apiform.MarshalRoot(r, writer)
	if err != nil {
		writer.Close()
		return nil, "", err
	}
	err = writer.Close()
	if err != nil {
		return nil, "", err
	}
	return buf.Bytes(), writer.FormDataContentType(), nil
}

type AccountAIRunExecuteModelParamsBody struct {
	Audio param.Field[interface{}] `json:"audio"`
	// Decreases the likelihood of the model repeating the same lines verbatim.
	FrequencyPenalty param.Field[float64]     `json:"frequency_penalty"`
	Functions        param.Field[interface{}] `json:"functions"`
	// Controls how closely the generated image should adhere to the prompt; higher
	// values make the image more aligned with the prompt
	Guidance param.Field[float64] `json:"guidance"`
	// The height of the generated image in pixels
	Height param.Field[int64] `json:"height"`
	// Whether to ignore the EOS token and continue generating tokens after the EOS
	// token is generated.
	IgnoreEos param.Field[bool]        `json:"ignore_eos"`
	Image     param.Field[interface{}] `json:"image"`
	// For use with img2img tasks. A base64-encoded string of the input image
	ImageB64 param.Field[string] `json:"image_b64"`
	// The text that you want the model to summarize
	InputText param.Field[string] `json:"input_text"`
	// The speech language (e.g., 'en' for English, 'fr' for French). Defaults to 'en'
	// if not specified
	Lang param.Field[string] `json:"lang"`
	// Name of the LoRA (Low-Rank Adaptation) model to fine-tune the base model.
	Lora param.Field[string]      `json:"lora"`
	Mask param.Field[interface{}] `json:"mask"`
	// The maximum length of the generated summary in tokens
	MaxLength param.Field[int64] `json:"max_length"`
	// The maximum number of tokens to generate in the response.
	MaxTokens param.Field[int64]       `json:"max_tokens"`
	Messages  param.Field[interface{}] `json:"messages"`
	// Text describing elements to avoid in the generated image
	NegativePrompt param.Field[string] `json:"negative_prompt"`
	// The number of diffusion steps; higher values can improve quality but take longer
	NumSteps param.Field[int64] `json:"num_steps"`
	// Increases the likelihood of the model introducing new topics.
	PresencePenalty param.Field[float64] `json:"presence_penalty"`
	// A text description of the image you want to generate
	Prompt param.Field[string] `json:"prompt"`
	// If true, a chat template is not applied and you must adhere to the specific
	// model's expected formatting.
	Raw param.Field[bool] `json:"raw"`
	// Penalty for repeated tokens; higher values discourage repetition.
	RepetitionPenalty param.Field[float64]     `json:"repetition_penalty"`
	ResponseFormat    param.Field[interface{}] `json:"response_format"`
	Seed              param.Field[interface{}] `json:"seed"`
	// The language of the recorded audio
	SourceLang param.Field[string] `json:"source_lang"`
	// If true, the response will be streamed back incrementally using SSE, Server Sent
	// Events.
	Stream param.Field[bool] `json:"stream"`
	// A value between 0 and 1 indicating how strongly to apply the transformation
	// during img2img tasks; lower values make the output closer to the input image
	Strength param.Field[float64] `json:"strength"`
	// The language to translate the transcription into. Currently only English is
	// supported.
	TargetLang param.Field[string] `json:"target_lang"`
	// Controls the randomness of the output; higher values produce more random
	// results.
	Temperature param.Field[float64]     `json:"temperature"`
	Text        param.Field[interface{}] `json:"text"`
	Tools       param.Field[interface{}] `json:"tools"`
	TopK        param.Field[interface{}] `json:"top_k"`
	// Adjusts the creativity of the AI's responses by controlling how many possible
	// words it considers. Lower values make outputs more predictable; higher values
	// allow for more varied and creative responses.
	TopP param.Field[float64] `json:"top_p"`
	// The width of the generated image in pixels
	Width param.Field[int64] `json:"width"`
}

func (r AccountAIRunExecuteModelParamsBody) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r AccountAIRunExecuteModelParamsBody) ImplementsAccountAIRunExecuteModelParamsBodyUnion() {}

// Satisfied by [AccountAIRunExecuteModelParamsBodyTextClassification],
// [AccountAIRunExecuteModelParamsBodyTextToImage],
// [AccountAIRunExecuteModelParamsBodyTextToSpeech],
// [AccountAIRunExecuteModelParamsBodyTextEmbeddings], [shared.UnionString],
// [AccountAIRunExecuteModelParamsBodyObject],
// [AccountAIRunExecuteModelParamsBodyImage],
// [AccountAIRunExecuteModelParamsBodyImage],
// [AccountAIRunExecuteModelParamsBodyPrompt],
// [AccountAIRunExecuteModelParamsBodyMessages],
// [AccountAIRunExecuteModelParamsBodyTranslation],
// [AccountAIRunExecuteModelParamsBodySummarization],
// [AccountAIRunExecuteModelParamsBodyObject],
// [AccountAIRunExecuteModelParamsBodyObject],
// [AccountAIRunExecuteModelParamsBodyObject],
// [AccountAIRunExecuteModelParamsBody].
type AccountAIRunExecuteModelParamsBodyUnion interface {
	ImplementsAccountAIRunExecuteModelParamsBodyUnion()
}

type AccountAIRunExecuteModelParamsBodyTextClassification struct {
	// The text that you want to classify
	Text param.Field[string] `json:"text,required"`
}

func (r AccountAIRunExecuteModelParamsBodyTextClassification) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r AccountAIRunExecuteModelParamsBodyTextClassification) ImplementsAccountAIRunExecuteModelParamsBodyUnion() {
}

type AccountAIRunExecuteModelParamsBodyTextToImage struct {
	// A text description of the image you want to generate
	Prompt param.Field[string] `json:"prompt,required"`
	// Controls how closely the generated image should adhere to the prompt; higher
	// values make the image more aligned with the prompt
	Guidance param.Field[float64] `json:"guidance"`
	// The height of the generated image in pixels
	Height param.Field[int64] `json:"height"`
	// For use with img2img tasks. An array of integers that represent the image data
	// constrained to 8-bit unsigned integer values
	Image param.Field[[]float64] `json:"image"`
	// For use with img2img tasks. A base64-encoded string of the input image
	ImageB64 param.Field[string] `json:"image_b64"`
	// An array representing An array of integers that represent mask image data for
	// inpainting constrained to 8-bit unsigned integer values
	Mask param.Field[[]float64] `json:"mask"`
	// Text describing elements to avoid in the generated image
	NegativePrompt param.Field[string] `json:"negative_prompt"`
	// The number of diffusion steps; higher values can improve quality but take longer
	NumSteps param.Field[int64] `json:"num_steps"`
	// Random seed for reproducibility of the image generation
	Seed param.Field[int64] `json:"seed"`
	// A value between 0 and 1 indicating how strongly to apply the transformation
	// during img2img tasks; lower values make the output closer to the input image
	Strength param.Field[float64] `json:"strength"`
	// The width of the generated image in pixels
	Width param.Field[int64] `json:"width"`
}

func (r AccountAIRunExecuteModelParamsBodyTextToImage) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r AccountAIRunExecuteModelParamsBodyTextToImage) ImplementsAccountAIRunExecuteModelParamsBodyUnion() {
}

type AccountAIRunExecuteModelParamsBodyTextToSpeech struct {
	// A text description of the audio you want to generate
	Prompt param.Field[string] `json:"prompt,required"`
	// The speech language (e.g., 'en' for English, 'fr' for French). Defaults to 'en'
	// if not specified
	Lang param.Field[string] `json:"lang"`
}

func (r AccountAIRunExecuteModelParamsBodyTextToSpeech) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r AccountAIRunExecuteModelParamsBodyTextToSpeech) ImplementsAccountAIRunExecuteModelParamsBodyUnion() {
}

type AccountAIRunExecuteModelParamsBodyTextEmbeddings struct {
	// The text to embed
	Text param.Field[AccountAIRunExecuteModelParamsBodyTextEmbeddingsTextUnion] `json:"text,required"`
}

func (r AccountAIRunExecuteModelParamsBodyTextEmbeddings) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r AccountAIRunExecuteModelParamsBodyTextEmbeddings) ImplementsAccountAIRunExecuteModelParamsBodyUnion() {
}

// The text to embed
//
// Satisfied by [shared.UnionString],
// [AccountAIRunExecuteModelParamsBodyTextEmbeddingsTextArray].
type AccountAIRunExecuteModelParamsBodyTextEmbeddingsTextUnion interface {
	ImplementsAccountAIRunExecuteModelParamsBodyTextEmbeddingsTextUnion()
}

type AccountAIRunExecuteModelParamsBodyTextEmbeddingsTextArray []string

func (r AccountAIRunExecuteModelParamsBodyTextEmbeddingsTextArray) ImplementsAccountAIRunExecuteModelParamsBodyTextEmbeddingsTextUnion() {
}

type AccountAIRunExecuteModelParamsBodyObject struct {
	// An array of integers that represent the audio data constrained to 8-bit unsigned
	// integer values
	Audio param.Field[[]float64] `json:"audio,required"`
	// The language of the recorded audio
	SourceLang param.Field[string] `json:"source_lang"`
	// The language to translate the transcription into. Currently only English is
	// supported.
	TargetLang param.Field[string] `json:"target_lang"`
}

func (r AccountAIRunExecuteModelParamsBodyObject) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r AccountAIRunExecuteModelParamsBodyObject) ImplementsAccountAIRunExecuteModelParamsBodyUnion() {
}

type AccountAIRunExecuteModelParamsBodyImage struct {
	// An array of integers that represent the image data constrained to 8-bit unsigned
	// integer values
	Image param.Field[[]float64] `json:"image,required"`
}

func (r AccountAIRunExecuteModelParamsBodyImage) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r AccountAIRunExecuteModelParamsBodyImage) ImplementsAccountAIRunExecuteModelParamsBodyUnion() {
}

type AccountAIRunExecuteModelParamsBodyPrompt struct {
	// The input text prompt for the model to generate a response.
	Prompt param.Field[string] `json:"prompt,required"`
	// Decreases the likelihood of the model repeating the same lines verbatim.
	FrequencyPenalty param.Field[float64] `json:"frequency_penalty"`
	// Name of the LoRA (Low-Rank Adaptation) model to fine-tune the base model.
	Lora param.Field[string] `json:"lora"`
	// The maximum number of tokens to generate in the response.
	MaxTokens param.Field[int64] `json:"max_tokens"`
	// Increases the likelihood of the model introducing new topics.
	PresencePenalty param.Field[float64] `json:"presence_penalty"`
	// If true, a chat template is not applied and you must adhere to the specific
	// model's expected formatting.
	Raw param.Field[bool] `json:"raw"`
	// Penalty for repeated tokens; higher values discourage repetition.
	RepetitionPenalty param.Field[float64]                                                `json:"repetition_penalty"`
	ResponseFormat    param.Field[AccountAIRunExecuteModelParamsBodyPromptResponseFormat] `json:"response_format"`
	// Random seed for reproducibility of the generation.
	Seed param.Field[int64] `json:"seed"`
	// If true, the response will be streamed back incrementally using SSE, Server Sent
	// Events.
	Stream param.Field[bool] `json:"stream"`
	// Controls the randomness of the output; higher values produce more random
	// results.
	Temperature param.Field[float64] `json:"temperature"`
	// Limits the AI to choose from the top 'k' most probable words. Lower values make
	// responses more focused; higher values introduce more variety and potential
	// surprises.
	TopK param.Field[int64] `json:"top_k"`
	// Adjusts the creativity of the AI's responses by controlling how many possible
	// words it considers. Lower values make outputs more predictable; higher values
	// allow for more varied and creative responses.
	TopP param.Field[float64] `json:"top_p"`
}

func (r AccountAIRunExecuteModelParamsBodyPrompt) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r AccountAIRunExecuteModelParamsBodyPrompt) ImplementsAccountAIRunExecuteModelParamsBodyUnion() {
}

type AccountAIRunExecuteModelParamsBodyPromptResponseFormat struct {
	JsonSchema param.Field[interface{}]                                                `json:"json_schema"`
	Type       param.Field[AccountAIRunExecuteModelParamsBodyPromptResponseFormatType] `json:"type"`
}

func (r AccountAIRunExecuteModelParamsBodyPromptResponseFormat) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type AccountAIRunExecuteModelParamsBodyPromptResponseFormatType string

const (
	AccountAIRunExecuteModelParamsBodyPromptResponseFormatTypeJsonObject AccountAIRunExecuteModelParamsBodyPromptResponseFormatType = "json_object"
	AccountAIRunExecuteModelParamsBodyPromptResponseFormatTypeJsonSchema AccountAIRunExecuteModelParamsBodyPromptResponseFormatType = "json_schema"
)

func (r AccountAIRunExecuteModelParamsBodyPromptResponseFormatType) IsKnown() bool {
	switch r {
	case AccountAIRunExecuteModelParamsBodyPromptResponseFormatTypeJsonObject, AccountAIRunExecuteModelParamsBodyPromptResponseFormatTypeJsonSchema:
		return true
	}
	return false
}

type AccountAIRunExecuteModelParamsBodyMessages struct {
	// An array of message objects representing the conversation history.
	Messages param.Field[[]AccountAIRunExecuteModelParamsBodyMessagesMessage] `json:"messages,required"`
	// Decreases the likelihood of the model repeating the same lines verbatim.
	FrequencyPenalty param.Field[float64]                                              `json:"frequency_penalty"`
	Functions        param.Field[[]AccountAIRunExecuteModelParamsBodyMessagesFunction] `json:"functions"`
	// The maximum number of tokens to generate in the response.
	MaxTokens param.Field[int64] `json:"max_tokens"`
	// Increases the likelihood of the model introducing new topics.
	PresencePenalty param.Field[float64] `json:"presence_penalty"`
	// If true, a chat template is not applied and you must adhere to the specific
	// model's expected formatting.
	Raw param.Field[bool] `json:"raw"`
	// Penalty for repeated tokens; higher values discourage repetition.
	RepetitionPenalty param.Field[float64]                                                  `json:"repetition_penalty"`
	ResponseFormat    param.Field[AccountAIRunExecuteModelParamsBodyMessagesResponseFormat] `json:"response_format"`
	// Random seed for reproducibility of the generation.
	Seed param.Field[int64] `json:"seed"`
	// If true, the response will be streamed back incrementally using SSE, Server Sent
	// Events.
	Stream param.Field[bool] `json:"stream"`
	// Controls the randomness of the output; higher values produce more random
	// results.
	Temperature param.Field[float64] `json:"temperature"`
	// A list of tools available for the assistant to use.
	Tools param.Field[[]AccountAIRunExecuteModelParamsBodyMessagesToolUnion] `json:"tools"`
	// Limits the AI to choose from the top 'k' most probable words. Lower values make
	// responses more focused; higher values introduce more variety and potential
	// surprises.
	TopK param.Field[int64] `json:"top_k"`
	// Adjusts the creativity of the AI's responses by controlling how many possible
	// words it considers. Lower values make outputs more predictable; higher values
	// allow for more varied and creative responses.
	TopP param.Field[float64] `json:"top_p"`
}

func (r AccountAIRunExecuteModelParamsBodyMessages) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r AccountAIRunExecuteModelParamsBodyMessages) ImplementsAccountAIRunExecuteModelParamsBodyUnion() {
}

type AccountAIRunExecuteModelParamsBodyMessagesMessage struct {
	// The content of the message as a string.
	Content param.Field[string] `json:"content,required"`
	// The role of the message sender (e.g., 'user', 'assistant', 'system', 'tool').
	Role param.Field[string] `json:"role,required"`
}

func (r AccountAIRunExecuteModelParamsBodyMessagesMessage) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type AccountAIRunExecuteModelParamsBodyMessagesFunction struct {
	Code param.Field[string] `json:"code,required"`
	Name param.Field[string] `json:"name,required"`
}

func (r AccountAIRunExecuteModelParamsBodyMessagesFunction) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type AccountAIRunExecuteModelParamsBodyMessagesResponseFormat struct {
	JsonSchema param.Field[interface{}]                                                  `json:"json_schema"`
	Type       param.Field[AccountAIRunExecuteModelParamsBodyMessagesResponseFormatType] `json:"type"`
}

func (r AccountAIRunExecuteModelParamsBodyMessagesResponseFormat) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type AccountAIRunExecuteModelParamsBodyMessagesResponseFormatType string

const (
	AccountAIRunExecuteModelParamsBodyMessagesResponseFormatTypeJsonObject AccountAIRunExecuteModelParamsBodyMessagesResponseFormatType = "json_object"
	AccountAIRunExecuteModelParamsBodyMessagesResponseFormatTypeJsonSchema AccountAIRunExecuteModelParamsBodyMessagesResponseFormatType = "json_schema"
)

func (r AccountAIRunExecuteModelParamsBodyMessagesResponseFormatType) IsKnown() bool {
	switch r {
	case AccountAIRunExecuteModelParamsBodyMessagesResponseFormatTypeJsonObject, AccountAIRunExecuteModelParamsBodyMessagesResponseFormatTypeJsonSchema:
		return true
	}
	return false
}

type AccountAIRunExecuteModelParamsBodyMessagesTool struct {
	// A brief description of what the tool does.
	Description param.Field[string]      `json:"description"`
	Function    param.Field[interface{}] `json:"function"`
	// The name of the tool. More descriptive the better.
	Name       param.Field[string]      `json:"name"`
	Parameters param.Field[interface{}] `json:"parameters"`
	// Specifies the type of tool (e.g., 'function').
	Type param.Field[string] `json:"type"`
}

func (r AccountAIRunExecuteModelParamsBodyMessagesTool) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r AccountAIRunExecuteModelParamsBodyMessagesTool) implementsAccountAIRunExecuteModelParamsBodyMessagesToolUnion() {
}

// Satisfied by [AccountAIRunExecuteModelParamsBodyMessagesToolsObject],
// [AccountAIRunExecuteModelParamsBodyMessagesToolsObject],
// [AccountAIRunExecuteModelParamsBodyMessagesTool].
type AccountAIRunExecuteModelParamsBodyMessagesToolUnion interface {
	implementsAccountAIRunExecuteModelParamsBodyMessagesToolUnion()
}

type AccountAIRunExecuteModelParamsBodyMessagesToolsObject struct {
	// A brief description of what the tool does.
	Description param.Field[string] `json:"description,required"`
	// The name of the tool. More descriptive the better.
	Name param.Field[string] `json:"name,required"`
	// Schema defining the parameters accepted by the tool.
	Parameters param.Field[AccountAIRunExecuteModelParamsBodyMessagesToolsObjectParameters] `json:"parameters,required"`
}

func (r AccountAIRunExecuteModelParamsBodyMessagesToolsObject) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r AccountAIRunExecuteModelParamsBodyMessagesToolsObject) implementsAccountAIRunExecuteModelParamsBodyMessagesToolUnion() {
}

// Schema defining the parameters accepted by the tool.
type AccountAIRunExecuteModelParamsBodyMessagesToolsObjectParameters struct {
	// Definitions of each parameter.
	Properties param.Field[map[string]AccountAIRunExecuteModelParamsBodyMessagesToolsObjectParametersProperties] `json:"properties,required"`
	// The type of the parameters object (usually 'object').
	Type param.Field[string] `json:"type,required"`
	// List of required parameter names.
	Required param.Field[[]string] `json:"required"`
}

func (r AccountAIRunExecuteModelParamsBodyMessagesToolsObjectParameters) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type AccountAIRunExecuteModelParamsBodyMessagesToolsObjectParametersProperties struct {
	// A description of the expected parameter.
	Description param.Field[string] `json:"description,required"`
	// The data type of the parameter.
	Type param.Field[string] `json:"type,required"`
}

func (r AccountAIRunExecuteModelParamsBodyMessagesToolsObjectParametersProperties) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type AccountAIRunExecuteModelParamsBodyTranslation struct {
	// The language code to translate the text into (e.g., 'es' for Spanish)
	TargetLang param.Field[string] `json:"target_lang,required"`
	// The text to be translated
	Text param.Field[string] `json:"text,required"`
	// The language code of the source text (e.g., 'en' for English). Defaults to 'en'
	// if not specified
	SourceLang param.Field[string] `json:"source_lang"`
}

func (r AccountAIRunExecuteModelParamsBodyTranslation) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r AccountAIRunExecuteModelParamsBodyTranslation) ImplementsAccountAIRunExecuteModelParamsBodyUnion() {
}

type AccountAIRunExecuteModelParamsBodySummarization struct {
	// The text that you want the model to summarize
	InputText param.Field[string] `json:"input_text,required"`
	// The maximum length of the generated summary in tokens
	MaxLength param.Field[int64] `json:"max_length"`
}

func (r AccountAIRunExecuteModelParamsBodySummarization) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r AccountAIRunExecuteModelParamsBodySummarization) ImplementsAccountAIRunExecuteModelParamsBodyUnion() {
}
