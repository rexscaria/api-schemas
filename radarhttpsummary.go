// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package cfrex

import (
	"context"
	"net/http"
	"net/url"
	"time"

	"github.com/rexscaria/api-schemas/internal/apijson"
	"github.com/rexscaria/api-schemas/internal/apiquery"
	"github.com/rexscaria/api-schemas/internal/param"
	"github.com/rexscaria/api-schemas/internal/requestconfig"
	"github.com/rexscaria/api-schemas/option"
)

// RadarHTTPSummaryService contains methods and other services that help with
// interacting with the cf-rex API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewRadarHTTPSummaryService] method instead.
type RadarHTTPSummaryService struct {
	Options []option.RequestOption
}

// NewRadarHTTPSummaryService generates a new service that applies the given
// options to each request. These options are applied after the parent client's
// options (if there is one), and before any request-specific options.
func NewRadarHTTPSummaryService(opts ...option.RequestOption) (r *RadarHTTPSummaryService) {
	r = &RadarHTTPSummaryService{}
	r.Options = opts
	return
}

// Retrieves the distribution of bot-generated HTTP requests to genuine human
// traffic, as classified by Cloudflare. Visit
// https://developers.cloudflare.com/radar/concepts/bot-classes/ for more
// information.
func (r *RadarHTTPSummaryService) GetByBotClass(ctx context.Context, query RadarHTTPSummaryGetByBotClassParams, opts ...option.RequestOption) (res *RadarHTTPSummaryGetByBotClassResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "radar/http/summary/bot_class"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

// Retrieves the distribution of HTTP requests generated by mobile, desktop, and
// other types of devices.
func (r *RadarHTTPSummaryService) GetByDeviceType(ctx context.Context, query RadarHTTPSummaryGetByDeviceTypeParams, opts ...option.RequestOption) (res *RadarHTTPSummaryGetByDeviceTypeResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "radar/http/summary/device_type"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

// Retrieves the distribution of HTTP requests by HTTP protocol (HTTP vs. HTTPS).
func (r *RadarHTTPSummaryService) GetByHTTPProtocol(ctx context.Context, query RadarHTTPSummaryGetByHTTPProtocolParams, opts ...option.RequestOption) (res *RadarHTTPSummaryGetByHTTPProtocolResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "radar/http/summary/http_protocol"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

// Retrieves the distribution of HTTP requests by HTTP version.
func (r *RadarHTTPSummaryService) GetByHTTPVersion(ctx context.Context, query RadarHTTPSummaryGetByHTTPVersionParams, opts ...option.RequestOption) (res *RadarHTTPSummaryGetByHTTPVersionResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "radar/http/summary/http_version"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

// Retrieves the distribution of HTTP requests by IP version.
func (r *RadarHTTPSummaryService) GetByIPVersion(ctx context.Context, query RadarHTTPSummaryGetByIPVersionParams, opts ...option.RequestOption) (res *RadarHTTPSummaryGetByIPVersionResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "radar/http/summary/ip_version"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

// Retrieves the distribution of HTTP requests by operating system (Windows, macOS,
// Android, iOS, and others).
func (r *RadarHTTPSummaryService) GetByOs(ctx context.Context, query RadarHTTPSummaryGetByOsParams, opts ...option.RequestOption) (res *RadarHTTPSummaryGetByOsResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "radar/http/summary/os"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

// Retrieves the distribution of HTTP requests by post-quantum support.
func (r *RadarHTTPSummaryService) GetByPostQuantum(ctx context.Context, query RadarHTTPSummaryGetByPostQuantumParams, opts ...option.RequestOption) (res *RadarHTTPSummaryGetByPostQuantumResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "radar/http/summary/post_quantum"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

// Retrieves the distribution of HTTP requests by TLS version.
func (r *RadarHTTPSummaryService) GetByTlsVersion(ctx context.Context, query RadarHTTPSummaryGetByTlsVersionParams, opts ...option.RequestOption) (res *RadarHTTPSummaryGetByTlsVersionResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "radar/http/summary/tls_version"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

type RadarHTTPSummaryGetByBotClassResponse struct {
	Result  RadarHTTPSummaryGetByBotClassResponseResult `json:"result,required"`
	Success bool                                        `json:"success,required"`
	JSON    radarHTTPSummaryGetByBotClassResponseJSON   `json:"-"`
}

// radarHTTPSummaryGetByBotClassResponseJSON contains the JSON metadata for the
// struct [RadarHTTPSummaryGetByBotClassResponse]
type radarHTTPSummaryGetByBotClassResponseJSON struct {
	Result      apijson.Field
	Success     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByBotClassResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByBotClassResponseJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByBotClassResponseResult struct {
	// Metadata for the results.
	Meta     RadarHTTPSummaryGetByBotClassResponseResultMeta     `json:"meta,required"`
	Summary0 RadarHTTPSummaryGetByBotClassResponseResultSummary0 `json:"summary_0,required"`
	JSON     radarHTTPSummaryGetByBotClassResponseResultJSON     `json:"-"`
}

// radarHTTPSummaryGetByBotClassResponseResultJSON contains the JSON metadata for
// the struct [RadarHTTPSummaryGetByBotClassResponseResult]
type radarHTTPSummaryGetByBotClassResponseResultJSON struct {
	Meta        apijson.Field
	Summary0    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByBotClassResponseResult) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByBotClassResponseResultJSON) RawJSON() string {
	return r.raw
}

// Metadata for the results.
type RadarHTTPSummaryGetByBotClassResponseResultMeta struct {
	ConfidenceInfo RadarHTTPSummaryGetByBotClassResponseResultMetaConfidenceInfo `json:"confidenceInfo,required"`
	DateRange      []RadarHTTPSummaryGetByBotClassResponseResultMetaDateRange    `json:"dateRange,required"`
	// Timestamp of the last dataset update.
	LastUpdated time.Time `json:"lastUpdated,required" format:"date-time"`
	// Normalization method applied to the results. Refer to
	// [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/).
	Normalization RadarHTTPSummaryGetByBotClassResponseResultMetaNormalization `json:"normalization,required"`
	// Measurement units for the results.
	Units []RadarHTTPSummaryGetByBotClassResponseResultMetaUnit `json:"units,required"`
	JSON  radarHTTPSummaryGetByBotClassResponseResultMetaJSON   `json:"-"`
}

// radarHTTPSummaryGetByBotClassResponseResultMetaJSON contains the JSON metadata
// for the struct [RadarHTTPSummaryGetByBotClassResponseResultMeta]
type radarHTTPSummaryGetByBotClassResponseResultMetaJSON struct {
	ConfidenceInfo apijson.Field
	DateRange      apijson.Field
	LastUpdated    apijson.Field
	Normalization  apijson.Field
	Units          apijson.Field
	raw            string
	ExtraFields    map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByBotClassResponseResultMeta) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByBotClassResponseResultMetaJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByBotClassResponseResultMetaConfidenceInfo struct {
	Annotations []RadarHTTPSummaryGetByBotClassResponseResultMetaConfidenceInfoAnnotation `json:"annotations,required"`
	// Provides an indication of how much confidence Cloudflare has in the data.
	Level int64                                                             `json:"level,required"`
	JSON  radarHTTPSummaryGetByBotClassResponseResultMetaConfidenceInfoJSON `json:"-"`
}

// radarHTTPSummaryGetByBotClassResponseResultMetaConfidenceInfoJSON contains the
// JSON metadata for the struct
// [RadarHTTPSummaryGetByBotClassResponseResultMetaConfidenceInfo]
type radarHTTPSummaryGetByBotClassResponseResultMetaConfidenceInfoJSON struct {
	Annotations apijson.Field
	Level       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByBotClassResponseResultMetaConfidenceInfo) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByBotClassResponseResultMetaConfidenceInfoJSON) RawJSON() string {
	return r.raw
}

// Annotation associated with the result (e.g. outage or other type of event).
type RadarHTTPSummaryGetByBotClassResponseResultMetaConfidenceInfoAnnotation struct {
	DataSource  string    `json:"dataSource,required"`
	Description string    `json:"description,required"`
	EndDate     time.Time `json:"endDate,required" format:"date-time"`
	EventType   string    `json:"eventType,required"`
	// Whether event is a single point in time or a time range.
	IsInstantaneous bool                                                                        `json:"isInstantaneous,required"`
	LinkedURL       string                                                                      `json:"linkedUrl,required" format:"uri"`
	StartDate       time.Time                                                                   `json:"startDate,required" format:"date-time"`
	JSON            radarHTTPSummaryGetByBotClassResponseResultMetaConfidenceInfoAnnotationJSON `json:"-"`
}

// radarHTTPSummaryGetByBotClassResponseResultMetaConfidenceInfoAnnotationJSON
// contains the JSON metadata for the struct
// [RadarHTTPSummaryGetByBotClassResponseResultMetaConfidenceInfoAnnotation]
type radarHTTPSummaryGetByBotClassResponseResultMetaConfidenceInfoAnnotationJSON struct {
	DataSource      apijson.Field
	Description     apijson.Field
	EndDate         apijson.Field
	EventType       apijson.Field
	IsInstantaneous apijson.Field
	LinkedURL       apijson.Field
	StartDate       apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByBotClassResponseResultMetaConfidenceInfoAnnotation) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByBotClassResponseResultMetaConfidenceInfoAnnotationJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByBotClassResponseResultMetaDateRange struct {
	// Adjusted end of date range.
	EndTime time.Time `json:"endTime,required" format:"date-time"`
	// Adjusted start of date range.
	StartTime time.Time                                                    `json:"startTime,required" format:"date-time"`
	JSON      radarHTTPSummaryGetByBotClassResponseResultMetaDateRangeJSON `json:"-"`
}

// radarHTTPSummaryGetByBotClassResponseResultMetaDateRangeJSON contains the JSON
// metadata for the struct
// [RadarHTTPSummaryGetByBotClassResponseResultMetaDateRange]
type radarHTTPSummaryGetByBotClassResponseResultMetaDateRangeJSON struct {
	EndTime     apijson.Field
	StartTime   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByBotClassResponseResultMetaDateRange) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByBotClassResponseResultMetaDateRangeJSON) RawJSON() string {
	return r.raw
}

// Normalization method applied to the results. Refer to
// [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/).
type RadarHTTPSummaryGetByBotClassResponseResultMetaNormalization string

const (
	RadarHTTPSummaryGetByBotClassResponseResultMetaNormalizationPercentage           RadarHTTPSummaryGetByBotClassResponseResultMetaNormalization = "PERCENTAGE"
	RadarHTTPSummaryGetByBotClassResponseResultMetaNormalizationMin0Max              RadarHTTPSummaryGetByBotClassResponseResultMetaNormalization = "MIN0_MAX"
	RadarHTTPSummaryGetByBotClassResponseResultMetaNormalizationMinMax               RadarHTTPSummaryGetByBotClassResponseResultMetaNormalization = "MIN_MAX"
	RadarHTTPSummaryGetByBotClassResponseResultMetaNormalizationRawValues            RadarHTTPSummaryGetByBotClassResponseResultMetaNormalization = "RAW_VALUES"
	RadarHTTPSummaryGetByBotClassResponseResultMetaNormalizationPercentageChange     RadarHTTPSummaryGetByBotClassResponseResultMetaNormalization = "PERCENTAGE_CHANGE"
	RadarHTTPSummaryGetByBotClassResponseResultMetaNormalizationRollingAverage       RadarHTTPSummaryGetByBotClassResponseResultMetaNormalization = "ROLLING_AVERAGE"
	RadarHTTPSummaryGetByBotClassResponseResultMetaNormalizationOverlappedPercentage RadarHTTPSummaryGetByBotClassResponseResultMetaNormalization = "OVERLAPPED_PERCENTAGE"
	RadarHTTPSummaryGetByBotClassResponseResultMetaNormalizationRatio                RadarHTTPSummaryGetByBotClassResponseResultMetaNormalization = "RATIO"
)

func (r RadarHTTPSummaryGetByBotClassResponseResultMetaNormalization) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByBotClassResponseResultMetaNormalizationPercentage, RadarHTTPSummaryGetByBotClassResponseResultMetaNormalizationMin0Max, RadarHTTPSummaryGetByBotClassResponseResultMetaNormalizationMinMax, RadarHTTPSummaryGetByBotClassResponseResultMetaNormalizationRawValues, RadarHTTPSummaryGetByBotClassResponseResultMetaNormalizationPercentageChange, RadarHTTPSummaryGetByBotClassResponseResultMetaNormalizationRollingAverage, RadarHTTPSummaryGetByBotClassResponseResultMetaNormalizationOverlappedPercentage, RadarHTTPSummaryGetByBotClassResponseResultMetaNormalizationRatio:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByBotClassResponseResultMetaUnit struct {
	Name  string                                                  `json:"name,required"`
	Value string                                                  `json:"value,required"`
	JSON  radarHTTPSummaryGetByBotClassResponseResultMetaUnitJSON `json:"-"`
}

// radarHTTPSummaryGetByBotClassResponseResultMetaUnitJSON contains the JSON
// metadata for the struct [RadarHTTPSummaryGetByBotClassResponseResultMetaUnit]
type radarHTTPSummaryGetByBotClassResponseResultMetaUnitJSON struct {
	Name        apijson.Field
	Value       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByBotClassResponseResultMetaUnit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByBotClassResponseResultMetaUnitJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByBotClassResponseResultSummary0 struct {
	// A numeric string.
	Bot string `json:"bot,required"`
	// A numeric string.
	Human string                                                  `json:"human,required"`
	JSON  radarHTTPSummaryGetByBotClassResponseResultSummary0JSON `json:"-"`
}

// radarHTTPSummaryGetByBotClassResponseResultSummary0JSON contains the JSON
// metadata for the struct [RadarHTTPSummaryGetByBotClassResponseResultSummary0]
type radarHTTPSummaryGetByBotClassResponseResultSummary0JSON struct {
	Bot         apijson.Field
	Human       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByBotClassResponseResultSummary0) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByBotClassResponseResultSummary0JSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByDeviceTypeResponse struct {
	Result  RadarHTTPSummaryGetByDeviceTypeResponseResult `json:"result,required"`
	Success bool                                          `json:"success,required"`
	JSON    radarHTTPSummaryGetByDeviceTypeResponseJSON   `json:"-"`
}

// radarHTTPSummaryGetByDeviceTypeResponseJSON contains the JSON metadata for the
// struct [RadarHTTPSummaryGetByDeviceTypeResponse]
type radarHTTPSummaryGetByDeviceTypeResponseJSON struct {
	Result      apijson.Field
	Success     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByDeviceTypeResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByDeviceTypeResponseJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByDeviceTypeResponseResult struct {
	// Metadata for the results.
	Meta     RadarHTTPSummaryGetByDeviceTypeResponseResultMeta     `json:"meta,required"`
	Summary0 RadarHTTPSummaryGetByDeviceTypeResponseResultSummary0 `json:"summary_0,required"`
	JSON     radarHTTPSummaryGetByDeviceTypeResponseResultJSON     `json:"-"`
}

// radarHTTPSummaryGetByDeviceTypeResponseResultJSON contains the JSON metadata for
// the struct [RadarHTTPSummaryGetByDeviceTypeResponseResult]
type radarHTTPSummaryGetByDeviceTypeResponseResultJSON struct {
	Meta        apijson.Field
	Summary0    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByDeviceTypeResponseResult) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByDeviceTypeResponseResultJSON) RawJSON() string {
	return r.raw
}

// Metadata for the results.
type RadarHTTPSummaryGetByDeviceTypeResponseResultMeta struct {
	ConfidenceInfo RadarHTTPSummaryGetByDeviceTypeResponseResultMetaConfidenceInfo `json:"confidenceInfo,required"`
	DateRange      []RadarHTTPSummaryGetByDeviceTypeResponseResultMetaDateRange    `json:"dateRange,required"`
	// Timestamp of the last dataset update.
	LastUpdated time.Time `json:"lastUpdated,required" format:"date-time"`
	// Normalization method applied to the results. Refer to
	// [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/).
	Normalization RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalization `json:"normalization,required"`
	// Measurement units for the results.
	Units []RadarHTTPSummaryGetByDeviceTypeResponseResultMetaUnit `json:"units,required"`
	JSON  radarHTTPSummaryGetByDeviceTypeResponseResultMetaJSON   `json:"-"`
}

// radarHTTPSummaryGetByDeviceTypeResponseResultMetaJSON contains the JSON metadata
// for the struct [RadarHTTPSummaryGetByDeviceTypeResponseResultMeta]
type radarHTTPSummaryGetByDeviceTypeResponseResultMetaJSON struct {
	ConfidenceInfo apijson.Field
	DateRange      apijson.Field
	LastUpdated    apijson.Field
	Normalization  apijson.Field
	Units          apijson.Field
	raw            string
	ExtraFields    map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByDeviceTypeResponseResultMeta) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByDeviceTypeResponseResultMetaJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByDeviceTypeResponseResultMetaConfidenceInfo struct {
	Annotations []RadarHTTPSummaryGetByDeviceTypeResponseResultMetaConfidenceInfoAnnotation `json:"annotations,required"`
	// Provides an indication of how much confidence Cloudflare has in the data.
	Level int64                                                               `json:"level,required"`
	JSON  radarHTTPSummaryGetByDeviceTypeResponseResultMetaConfidenceInfoJSON `json:"-"`
}

// radarHTTPSummaryGetByDeviceTypeResponseResultMetaConfidenceInfoJSON contains the
// JSON metadata for the struct
// [RadarHTTPSummaryGetByDeviceTypeResponseResultMetaConfidenceInfo]
type radarHTTPSummaryGetByDeviceTypeResponseResultMetaConfidenceInfoJSON struct {
	Annotations apijson.Field
	Level       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByDeviceTypeResponseResultMetaConfidenceInfo) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByDeviceTypeResponseResultMetaConfidenceInfoJSON) RawJSON() string {
	return r.raw
}

// Annotation associated with the result (e.g. outage or other type of event).
type RadarHTTPSummaryGetByDeviceTypeResponseResultMetaConfidenceInfoAnnotation struct {
	DataSource  string    `json:"dataSource,required"`
	Description string    `json:"description,required"`
	EndDate     time.Time `json:"endDate,required" format:"date-time"`
	EventType   string    `json:"eventType,required"`
	// Whether event is a single point in time or a time range.
	IsInstantaneous bool                                                                          `json:"isInstantaneous,required"`
	LinkedURL       string                                                                        `json:"linkedUrl,required" format:"uri"`
	StartDate       time.Time                                                                     `json:"startDate,required" format:"date-time"`
	JSON            radarHTTPSummaryGetByDeviceTypeResponseResultMetaConfidenceInfoAnnotationJSON `json:"-"`
}

// radarHTTPSummaryGetByDeviceTypeResponseResultMetaConfidenceInfoAnnotationJSON
// contains the JSON metadata for the struct
// [RadarHTTPSummaryGetByDeviceTypeResponseResultMetaConfidenceInfoAnnotation]
type radarHTTPSummaryGetByDeviceTypeResponseResultMetaConfidenceInfoAnnotationJSON struct {
	DataSource      apijson.Field
	Description     apijson.Field
	EndDate         apijson.Field
	EventType       apijson.Field
	IsInstantaneous apijson.Field
	LinkedURL       apijson.Field
	StartDate       apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByDeviceTypeResponseResultMetaConfidenceInfoAnnotation) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByDeviceTypeResponseResultMetaConfidenceInfoAnnotationJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByDeviceTypeResponseResultMetaDateRange struct {
	// Adjusted end of date range.
	EndTime time.Time `json:"endTime,required" format:"date-time"`
	// Adjusted start of date range.
	StartTime time.Time                                                      `json:"startTime,required" format:"date-time"`
	JSON      radarHTTPSummaryGetByDeviceTypeResponseResultMetaDateRangeJSON `json:"-"`
}

// radarHTTPSummaryGetByDeviceTypeResponseResultMetaDateRangeJSON contains the JSON
// metadata for the struct
// [RadarHTTPSummaryGetByDeviceTypeResponseResultMetaDateRange]
type radarHTTPSummaryGetByDeviceTypeResponseResultMetaDateRangeJSON struct {
	EndTime     apijson.Field
	StartTime   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByDeviceTypeResponseResultMetaDateRange) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByDeviceTypeResponseResultMetaDateRangeJSON) RawJSON() string {
	return r.raw
}

// Normalization method applied to the results. Refer to
// [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/).
type RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalization string

const (
	RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalizationPercentage           RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalization = "PERCENTAGE"
	RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalizationMin0Max              RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalization = "MIN0_MAX"
	RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalizationMinMax               RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalization = "MIN_MAX"
	RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalizationRawValues            RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalization = "RAW_VALUES"
	RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalizationPercentageChange     RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalization = "PERCENTAGE_CHANGE"
	RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalizationRollingAverage       RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalization = "ROLLING_AVERAGE"
	RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalizationOverlappedPercentage RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalization = "OVERLAPPED_PERCENTAGE"
	RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalizationRatio                RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalization = "RATIO"
)

func (r RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalization) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalizationPercentage, RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalizationMin0Max, RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalizationMinMax, RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalizationRawValues, RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalizationPercentageChange, RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalizationRollingAverage, RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalizationOverlappedPercentage, RadarHTTPSummaryGetByDeviceTypeResponseResultMetaNormalizationRatio:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByDeviceTypeResponseResultMetaUnit struct {
	Name  string                                                    `json:"name,required"`
	Value string                                                    `json:"value,required"`
	JSON  radarHTTPSummaryGetByDeviceTypeResponseResultMetaUnitJSON `json:"-"`
}

// radarHTTPSummaryGetByDeviceTypeResponseResultMetaUnitJSON contains the JSON
// metadata for the struct [RadarHTTPSummaryGetByDeviceTypeResponseResultMetaUnit]
type radarHTTPSummaryGetByDeviceTypeResponseResultMetaUnitJSON struct {
	Name        apijson.Field
	Value       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByDeviceTypeResponseResultMetaUnit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByDeviceTypeResponseResultMetaUnitJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByDeviceTypeResponseResultSummary0 struct {
	// A numeric string.
	Desktop string `json:"desktop,required"`
	// A numeric string.
	Mobile string `json:"mobile,required"`
	// A numeric string.
	Other string                                                    `json:"other,required"`
	JSON  radarHTTPSummaryGetByDeviceTypeResponseResultSummary0JSON `json:"-"`
}

// radarHTTPSummaryGetByDeviceTypeResponseResultSummary0JSON contains the JSON
// metadata for the struct [RadarHTTPSummaryGetByDeviceTypeResponseResultSummary0]
type radarHTTPSummaryGetByDeviceTypeResponseResultSummary0JSON struct {
	Desktop     apijson.Field
	Mobile      apijson.Field
	Other       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByDeviceTypeResponseResultSummary0) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByDeviceTypeResponseResultSummary0JSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByHTTPProtocolResponse struct {
	Result  RadarHTTPSummaryGetByHTTPProtocolResponseResult `json:"result,required"`
	Success bool                                            `json:"success,required"`
	JSON    radarHTTPSummaryGetByHTTPProtocolResponseJSON   `json:"-"`
}

// radarHTTPSummaryGetByHTTPProtocolResponseJSON contains the JSON metadata for the
// struct [RadarHTTPSummaryGetByHTTPProtocolResponse]
type radarHTTPSummaryGetByHTTPProtocolResponseJSON struct {
	Result      apijson.Field
	Success     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByHTTPProtocolResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByHTTPProtocolResponseJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByHTTPProtocolResponseResult struct {
	// Metadata for the results.
	Meta     RadarHTTPSummaryGetByHTTPProtocolResponseResultMeta     `json:"meta,required"`
	Summary0 RadarHTTPSummaryGetByHTTPProtocolResponseResultSummary0 `json:"summary_0,required"`
	JSON     radarHTTPSummaryGetByHTTPProtocolResponseResultJSON     `json:"-"`
}

// radarHTTPSummaryGetByHTTPProtocolResponseResultJSON contains the JSON metadata
// for the struct [RadarHTTPSummaryGetByHTTPProtocolResponseResult]
type radarHTTPSummaryGetByHTTPProtocolResponseResultJSON struct {
	Meta        apijson.Field
	Summary0    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByHTTPProtocolResponseResult) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByHTTPProtocolResponseResultJSON) RawJSON() string {
	return r.raw
}

// Metadata for the results.
type RadarHTTPSummaryGetByHTTPProtocolResponseResultMeta struct {
	ConfidenceInfo RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaConfidenceInfo `json:"confidenceInfo,required"`
	DateRange      []RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaDateRange    `json:"dateRange,required"`
	// Timestamp of the last dataset update.
	LastUpdated time.Time `json:"lastUpdated,required" format:"date-time"`
	// Normalization method applied to the results. Refer to
	// [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/).
	Normalization RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalization `json:"normalization,required"`
	// Measurement units for the results.
	Units []RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaUnit `json:"units,required"`
	JSON  radarHTTPSummaryGetByHTTPProtocolResponseResultMetaJSON   `json:"-"`
}

// radarHTTPSummaryGetByHTTPProtocolResponseResultMetaJSON contains the JSON
// metadata for the struct [RadarHTTPSummaryGetByHTTPProtocolResponseResultMeta]
type radarHTTPSummaryGetByHTTPProtocolResponseResultMetaJSON struct {
	ConfidenceInfo apijson.Field
	DateRange      apijson.Field
	LastUpdated    apijson.Field
	Normalization  apijson.Field
	Units          apijson.Field
	raw            string
	ExtraFields    map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByHTTPProtocolResponseResultMeta) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByHTTPProtocolResponseResultMetaJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaConfidenceInfo struct {
	Annotations []RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaConfidenceInfoAnnotation `json:"annotations,required"`
	// Provides an indication of how much confidence Cloudflare has in the data.
	Level int64                                                                 `json:"level,required"`
	JSON  radarHTTPSummaryGetByHTTPProtocolResponseResultMetaConfidenceInfoJSON `json:"-"`
}

// radarHTTPSummaryGetByHTTPProtocolResponseResultMetaConfidenceInfoJSON contains
// the JSON metadata for the struct
// [RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaConfidenceInfo]
type radarHTTPSummaryGetByHTTPProtocolResponseResultMetaConfidenceInfoJSON struct {
	Annotations apijson.Field
	Level       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaConfidenceInfo) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByHTTPProtocolResponseResultMetaConfidenceInfoJSON) RawJSON() string {
	return r.raw
}

// Annotation associated with the result (e.g. outage or other type of event).
type RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaConfidenceInfoAnnotation struct {
	DataSource  string    `json:"dataSource,required"`
	Description string    `json:"description,required"`
	EndDate     time.Time `json:"endDate,required" format:"date-time"`
	EventType   string    `json:"eventType,required"`
	// Whether event is a single point in time or a time range.
	IsInstantaneous bool                                                                            `json:"isInstantaneous,required"`
	LinkedURL       string                                                                          `json:"linkedUrl,required" format:"uri"`
	StartDate       time.Time                                                                       `json:"startDate,required" format:"date-time"`
	JSON            radarHTTPSummaryGetByHTTPProtocolResponseResultMetaConfidenceInfoAnnotationJSON `json:"-"`
}

// radarHTTPSummaryGetByHTTPProtocolResponseResultMetaConfidenceInfoAnnotationJSON
// contains the JSON metadata for the struct
// [RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaConfidenceInfoAnnotation]
type radarHTTPSummaryGetByHTTPProtocolResponseResultMetaConfidenceInfoAnnotationJSON struct {
	DataSource      apijson.Field
	Description     apijson.Field
	EndDate         apijson.Field
	EventType       apijson.Field
	IsInstantaneous apijson.Field
	LinkedURL       apijson.Field
	StartDate       apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaConfidenceInfoAnnotation) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByHTTPProtocolResponseResultMetaConfidenceInfoAnnotationJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaDateRange struct {
	// Adjusted end of date range.
	EndTime time.Time `json:"endTime,required" format:"date-time"`
	// Adjusted start of date range.
	StartTime time.Time                                                        `json:"startTime,required" format:"date-time"`
	JSON      radarHTTPSummaryGetByHTTPProtocolResponseResultMetaDateRangeJSON `json:"-"`
}

// radarHTTPSummaryGetByHTTPProtocolResponseResultMetaDateRangeJSON contains the
// JSON metadata for the struct
// [RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaDateRange]
type radarHTTPSummaryGetByHTTPProtocolResponseResultMetaDateRangeJSON struct {
	EndTime     apijson.Field
	StartTime   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaDateRange) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByHTTPProtocolResponseResultMetaDateRangeJSON) RawJSON() string {
	return r.raw
}

// Normalization method applied to the results. Refer to
// [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/).
type RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalization string

const (
	RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalizationPercentage           RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalization = "PERCENTAGE"
	RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalizationMin0Max              RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalization = "MIN0_MAX"
	RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalizationMinMax               RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalization = "MIN_MAX"
	RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalizationRawValues            RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalization = "RAW_VALUES"
	RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalizationPercentageChange     RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalization = "PERCENTAGE_CHANGE"
	RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalizationRollingAverage       RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalization = "ROLLING_AVERAGE"
	RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalizationOverlappedPercentage RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalization = "OVERLAPPED_PERCENTAGE"
	RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalizationRatio                RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalization = "RATIO"
)

func (r RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalization) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalizationPercentage, RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalizationMin0Max, RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalizationMinMax, RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalizationRawValues, RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalizationPercentageChange, RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalizationRollingAverage, RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalizationOverlappedPercentage, RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaNormalizationRatio:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaUnit struct {
	Name  string                                                      `json:"name,required"`
	Value string                                                      `json:"value,required"`
	JSON  radarHTTPSummaryGetByHTTPProtocolResponseResultMetaUnitJSON `json:"-"`
}

// radarHTTPSummaryGetByHTTPProtocolResponseResultMetaUnitJSON contains the JSON
// metadata for the struct
// [RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaUnit]
type radarHTTPSummaryGetByHTTPProtocolResponseResultMetaUnitJSON struct {
	Name        apijson.Field
	Value       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByHTTPProtocolResponseResultMetaUnit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByHTTPProtocolResponseResultMetaUnitJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByHTTPProtocolResponseResultSummary0 struct {
	// A numeric string.
	HTTP string `json:"http,required"`
	// A numeric string.
	HTTPS string                                                      `json:"https,required"`
	JSON  radarHTTPSummaryGetByHTTPProtocolResponseResultSummary0JSON `json:"-"`
}

// radarHTTPSummaryGetByHTTPProtocolResponseResultSummary0JSON contains the JSON
// metadata for the struct
// [RadarHTTPSummaryGetByHTTPProtocolResponseResultSummary0]
type radarHTTPSummaryGetByHTTPProtocolResponseResultSummary0JSON struct {
	HTTP        apijson.Field
	HTTPS       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByHTTPProtocolResponseResultSummary0) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByHTTPProtocolResponseResultSummary0JSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByHTTPVersionResponse struct {
	Result  RadarHTTPSummaryGetByHTTPVersionResponseResult `json:"result,required"`
	Success bool                                           `json:"success,required"`
	JSON    radarHTTPSummaryGetByHTTPVersionResponseJSON   `json:"-"`
}

// radarHTTPSummaryGetByHTTPVersionResponseJSON contains the JSON metadata for the
// struct [RadarHTTPSummaryGetByHTTPVersionResponse]
type radarHTTPSummaryGetByHTTPVersionResponseJSON struct {
	Result      apijson.Field
	Success     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByHTTPVersionResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByHTTPVersionResponseJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByHTTPVersionResponseResult struct {
	// Metadata for the results.
	Meta     RadarHTTPSummaryGetByHTTPVersionResponseResultMeta     `json:"meta,required"`
	Summary0 RadarHTTPSummaryGetByHTTPVersionResponseResultSummary0 `json:"summary_0,required"`
	JSON     radarHTTPSummaryGetByHTTPVersionResponseResultJSON     `json:"-"`
}

// radarHTTPSummaryGetByHTTPVersionResponseResultJSON contains the JSON metadata
// for the struct [RadarHTTPSummaryGetByHTTPVersionResponseResult]
type radarHTTPSummaryGetByHTTPVersionResponseResultJSON struct {
	Meta        apijson.Field
	Summary0    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByHTTPVersionResponseResult) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByHTTPVersionResponseResultJSON) RawJSON() string {
	return r.raw
}

// Metadata for the results.
type RadarHTTPSummaryGetByHTTPVersionResponseResultMeta struct {
	ConfidenceInfo RadarHTTPSummaryGetByHTTPVersionResponseResultMetaConfidenceInfo `json:"confidenceInfo,required"`
	DateRange      []RadarHTTPSummaryGetByHTTPVersionResponseResultMetaDateRange    `json:"dateRange,required"`
	// Timestamp of the last dataset update.
	LastUpdated time.Time `json:"lastUpdated,required" format:"date-time"`
	// Normalization method applied to the results. Refer to
	// [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/).
	Normalization RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalization `json:"normalization,required"`
	// Measurement units for the results.
	Units []RadarHTTPSummaryGetByHTTPVersionResponseResultMetaUnit `json:"units,required"`
	JSON  radarHTTPSummaryGetByHTTPVersionResponseResultMetaJSON   `json:"-"`
}

// radarHTTPSummaryGetByHTTPVersionResponseResultMetaJSON contains the JSON
// metadata for the struct [RadarHTTPSummaryGetByHTTPVersionResponseResultMeta]
type radarHTTPSummaryGetByHTTPVersionResponseResultMetaJSON struct {
	ConfidenceInfo apijson.Field
	DateRange      apijson.Field
	LastUpdated    apijson.Field
	Normalization  apijson.Field
	Units          apijson.Field
	raw            string
	ExtraFields    map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByHTTPVersionResponseResultMeta) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByHTTPVersionResponseResultMetaJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByHTTPVersionResponseResultMetaConfidenceInfo struct {
	Annotations []RadarHTTPSummaryGetByHTTPVersionResponseResultMetaConfidenceInfoAnnotation `json:"annotations,required"`
	// Provides an indication of how much confidence Cloudflare has in the data.
	Level int64                                                                `json:"level,required"`
	JSON  radarHTTPSummaryGetByHTTPVersionResponseResultMetaConfidenceInfoJSON `json:"-"`
}

// radarHTTPSummaryGetByHTTPVersionResponseResultMetaConfidenceInfoJSON contains
// the JSON metadata for the struct
// [RadarHTTPSummaryGetByHTTPVersionResponseResultMetaConfidenceInfo]
type radarHTTPSummaryGetByHTTPVersionResponseResultMetaConfidenceInfoJSON struct {
	Annotations apijson.Field
	Level       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByHTTPVersionResponseResultMetaConfidenceInfo) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByHTTPVersionResponseResultMetaConfidenceInfoJSON) RawJSON() string {
	return r.raw
}

// Annotation associated with the result (e.g. outage or other type of event).
type RadarHTTPSummaryGetByHTTPVersionResponseResultMetaConfidenceInfoAnnotation struct {
	DataSource  string    `json:"dataSource,required"`
	Description string    `json:"description,required"`
	EndDate     time.Time `json:"endDate,required" format:"date-time"`
	EventType   string    `json:"eventType,required"`
	// Whether event is a single point in time or a time range.
	IsInstantaneous bool                                                                           `json:"isInstantaneous,required"`
	LinkedURL       string                                                                         `json:"linkedUrl,required" format:"uri"`
	StartDate       time.Time                                                                      `json:"startDate,required" format:"date-time"`
	JSON            radarHTTPSummaryGetByHTTPVersionResponseResultMetaConfidenceInfoAnnotationJSON `json:"-"`
}

// radarHTTPSummaryGetByHTTPVersionResponseResultMetaConfidenceInfoAnnotationJSON
// contains the JSON metadata for the struct
// [RadarHTTPSummaryGetByHTTPVersionResponseResultMetaConfidenceInfoAnnotation]
type radarHTTPSummaryGetByHTTPVersionResponseResultMetaConfidenceInfoAnnotationJSON struct {
	DataSource      apijson.Field
	Description     apijson.Field
	EndDate         apijson.Field
	EventType       apijson.Field
	IsInstantaneous apijson.Field
	LinkedURL       apijson.Field
	StartDate       apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByHTTPVersionResponseResultMetaConfidenceInfoAnnotation) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByHTTPVersionResponseResultMetaConfidenceInfoAnnotationJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByHTTPVersionResponseResultMetaDateRange struct {
	// Adjusted end of date range.
	EndTime time.Time `json:"endTime,required" format:"date-time"`
	// Adjusted start of date range.
	StartTime time.Time                                                       `json:"startTime,required" format:"date-time"`
	JSON      radarHTTPSummaryGetByHTTPVersionResponseResultMetaDateRangeJSON `json:"-"`
}

// radarHTTPSummaryGetByHTTPVersionResponseResultMetaDateRangeJSON contains the
// JSON metadata for the struct
// [RadarHTTPSummaryGetByHTTPVersionResponseResultMetaDateRange]
type radarHTTPSummaryGetByHTTPVersionResponseResultMetaDateRangeJSON struct {
	EndTime     apijson.Field
	StartTime   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByHTTPVersionResponseResultMetaDateRange) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByHTTPVersionResponseResultMetaDateRangeJSON) RawJSON() string {
	return r.raw
}

// Normalization method applied to the results. Refer to
// [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/).
type RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalization string

const (
	RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalizationPercentage           RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalization = "PERCENTAGE"
	RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalizationMin0Max              RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalization = "MIN0_MAX"
	RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalizationMinMax               RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalization = "MIN_MAX"
	RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalizationRawValues            RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalization = "RAW_VALUES"
	RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalizationPercentageChange     RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalization = "PERCENTAGE_CHANGE"
	RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalizationRollingAverage       RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalization = "ROLLING_AVERAGE"
	RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalizationOverlappedPercentage RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalization = "OVERLAPPED_PERCENTAGE"
	RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalizationRatio                RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalization = "RATIO"
)

func (r RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalization) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalizationPercentage, RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalizationMin0Max, RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalizationMinMax, RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalizationRawValues, RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalizationPercentageChange, RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalizationRollingAverage, RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalizationOverlappedPercentage, RadarHTTPSummaryGetByHTTPVersionResponseResultMetaNormalizationRatio:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByHTTPVersionResponseResultMetaUnit struct {
	Name  string                                                     `json:"name,required"`
	Value string                                                     `json:"value,required"`
	JSON  radarHTTPSummaryGetByHTTPVersionResponseResultMetaUnitJSON `json:"-"`
}

// radarHTTPSummaryGetByHTTPVersionResponseResultMetaUnitJSON contains the JSON
// metadata for the struct [RadarHTTPSummaryGetByHTTPVersionResponseResultMetaUnit]
type radarHTTPSummaryGetByHTTPVersionResponseResultMetaUnitJSON struct {
	Name        apijson.Field
	Value       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByHTTPVersionResponseResultMetaUnit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByHTTPVersionResponseResultMetaUnitJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByHTTPVersionResponseResultSummary0 struct {
	// A numeric string.
	HTTP1X string `json:"HTTP/1.x,required"`
	// A numeric string.
	HTTP2 string `json:"HTTP/2,required"`
	// A numeric string.
	HTTP3 string                                                     `json:"HTTP/3,required"`
	JSON  radarHTTPSummaryGetByHTTPVersionResponseResultSummary0JSON `json:"-"`
}

// radarHTTPSummaryGetByHTTPVersionResponseResultSummary0JSON contains the JSON
// metadata for the struct [RadarHTTPSummaryGetByHTTPVersionResponseResultSummary0]
type radarHTTPSummaryGetByHTTPVersionResponseResultSummary0JSON struct {
	HTTP1X      apijson.Field
	HTTP2       apijson.Field
	HTTP3       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByHTTPVersionResponseResultSummary0) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByHTTPVersionResponseResultSummary0JSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByIPVersionResponse struct {
	Result  RadarHTTPSummaryGetByIPVersionResponseResult `json:"result,required"`
	Success bool                                         `json:"success,required"`
	JSON    radarHTTPSummaryGetByIPVersionResponseJSON   `json:"-"`
}

// radarHTTPSummaryGetByIPVersionResponseJSON contains the JSON metadata for the
// struct [RadarHTTPSummaryGetByIPVersionResponse]
type radarHTTPSummaryGetByIPVersionResponseJSON struct {
	Result      apijson.Field
	Success     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByIPVersionResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByIPVersionResponseJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByIPVersionResponseResult struct {
	// Metadata for the results.
	Meta     RadarHTTPSummaryGetByIPVersionResponseResultMeta     `json:"meta,required"`
	Summary0 RadarHTTPSummaryGetByIPVersionResponseResultSummary0 `json:"summary_0,required"`
	JSON     radarHTTPSummaryGetByIPVersionResponseResultJSON     `json:"-"`
}

// radarHTTPSummaryGetByIPVersionResponseResultJSON contains the JSON metadata for
// the struct [RadarHTTPSummaryGetByIPVersionResponseResult]
type radarHTTPSummaryGetByIPVersionResponseResultJSON struct {
	Meta        apijson.Field
	Summary0    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByIPVersionResponseResult) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByIPVersionResponseResultJSON) RawJSON() string {
	return r.raw
}

// Metadata for the results.
type RadarHTTPSummaryGetByIPVersionResponseResultMeta struct {
	ConfidenceInfo RadarHTTPSummaryGetByIPVersionResponseResultMetaConfidenceInfo `json:"confidenceInfo,required"`
	DateRange      []RadarHTTPSummaryGetByIPVersionResponseResultMetaDateRange    `json:"dateRange,required"`
	// Timestamp of the last dataset update.
	LastUpdated time.Time `json:"lastUpdated,required" format:"date-time"`
	// Normalization method applied to the results. Refer to
	// [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/).
	Normalization RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalization `json:"normalization,required"`
	// Measurement units for the results.
	Units []RadarHTTPSummaryGetByIPVersionResponseResultMetaUnit `json:"units,required"`
	JSON  radarHTTPSummaryGetByIPVersionResponseResultMetaJSON   `json:"-"`
}

// radarHTTPSummaryGetByIPVersionResponseResultMetaJSON contains the JSON metadata
// for the struct [RadarHTTPSummaryGetByIPVersionResponseResultMeta]
type radarHTTPSummaryGetByIPVersionResponseResultMetaJSON struct {
	ConfidenceInfo apijson.Field
	DateRange      apijson.Field
	LastUpdated    apijson.Field
	Normalization  apijson.Field
	Units          apijson.Field
	raw            string
	ExtraFields    map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByIPVersionResponseResultMeta) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByIPVersionResponseResultMetaJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByIPVersionResponseResultMetaConfidenceInfo struct {
	Annotations []RadarHTTPSummaryGetByIPVersionResponseResultMetaConfidenceInfoAnnotation `json:"annotations,required"`
	// Provides an indication of how much confidence Cloudflare has in the data.
	Level int64                                                              `json:"level,required"`
	JSON  radarHTTPSummaryGetByIPVersionResponseResultMetaConfidenceInfoJSON `json:"-"`
}

// radarHTTPSummaryGetByIPVersionResponseResultMetaConfidenceInfoJSON contains the
// JSON metadata for the struct
// [RadarHTTPSummaryGetByIPVersionResponseResultMetaConfidenceInfo]
type radarHTTPSummaryGetByIPVersionResponseResultMetaConfidenceInfoJSON struct {
	Annotations apijson.Field
	Level       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByIPVersionResponseResultMetaConfidenceInfo) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByIPVersionResponseResultMetaConfidenceInfoJSON) RawJSON() string {
	return r.raw
}

// Annotation associated with the result (e.g. outage or other type of event).
type RadarHTTPSummaryGetByIPVersionResponseResultMetaConfidenceInfoAnnotation struct {
	DataSource  string    `json:"dataSource,required"`
	Description string    `json:"description,required"`
	EndDate     time.Time `json:"endDate,required" format:"date-time"`
	EventType   string    `json:"eventType,required"`
	// Whether event is a single point in time or a time range.
	IsInstantaneous bool                                                                         `json:"isInstantaneous,required"`
	LinkedURL       string                                                                       `json:"linkedUrl,required" format:"uri"`
	StartDate       time.Time                                                                    `json:"startDate,required" format:"date-time"`
	JSON            radarHTTPSummaryGetByIPVersionResponseResultMetaConfidenceInfoAnnotationJSON `json:"-"`
}

// radarHTTPSummaryGetByIPVersionResponseResultMetaConfidenceInfoAnnotationJSON
// contains the JSON metadata for the struct
// [RadarHTTPSummaryGetByIPVersionResponseResultMetaConfidenceInfoAnnotation]
type radarHTTPSummaryGetByIPVersionResponseResultMetaConfidenceInfoAnnotationJSON struct {
	DataSource      apijson.Field
	Description     apijson.Field
	EndDate         apijson.Field
	EventType       apijson.Field
	IsInstantaneous apijson.Field
	LinkedURL       apijson.Field
	StartDate       apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByIPVersionResponseResultMetaConfidenceInfoAnnotation) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByIPVersionResponseResultMetaConfidenceInfoAnnotationJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByIPVersionResponseResultMetaDateRange struct {
	// Adjusted end of date range.
	EndTime time.Time `json:"endTime,required" format:"date-time"`
	// Adjusted start of date range.
	StartTime time.Time                                                     `json:"startTime,required" format:"date-time"`
	JSON      radarHTTPSummaryGetByIPVersionResponseResultMetaDateRangeJSON `json:"-"`
}

// radarHTTPSummaryGetByIPVersionResponseResultMetaDateRangeJSON contains the JSON
// metadata for the struct
// [RadarHTTPSummaryGetByIPVersionResponseResultMetaDateRange]
type radarHTTPSummaryGetByIPVersionResponseResultMetaDateRangeJSON struct {
	EndTime     apijson.Field
	StartTime   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByIPVersionResponseResultMetaDateRange) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByIPVersionResponseResultMetaDateRangeJSON) RawJSON() string {
	return r.raw
}

// Normalization method applied to the results. Refer to
// [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/).
type RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalization string

const (
	RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalizationPercentage           RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalization = "PERCENTAGE"
	RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalizationMin0Max              RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalization = "MIN0_MAX"
	RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalizationMinMax               RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalization = "MIN_MAX"
	RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalizationRawValues            RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalization = "RAW_VALUES"
	RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalizationPercentageChange     RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalization = "PERCENTAGE_CHANGE"
	RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalizationRollingAverage       RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalization = "ROLLING_AVERAGE"
	RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalizationOverlappedPercentage RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalization = "OVERLAPPED_PERCENTAGE"
	RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalizationRatio                RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalization = "RATIO"
)

func (r RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalization) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalizationPercentage, RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalizationMin0Max, RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalizationMinMax, RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalizationRawValues, RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalizationPercentageChange, RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalizationRollingAverage, RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalizationOverlappedPercentage, RadarHTTPSummaryGetByIPVersionResponseResultMetaNormalizationRatio:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByIPVersionResponseResultMetaUnit struct {
	Name  string                                                   `json:"name,required"`
	Value string                                                   `json:"value,required"`
	JSON  radarHTTPSummaryGetByIPVersionResponseResultMetaUnitJSON `json:"-"`
}

// radarHTTPSummaryGetByIPVersionResponseResultMetaUnitJSON contains the JSON
// metadata for the struct [RadarHTTPSummaryGetByIPVersionResponseResultMetaUnit]
type radarHTTPSummaryGetByIPVersionResponseResultMetaUnitJSON struct {
	Name        apijson.Field
	Value       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByIPVersionResponseResultMetaUnit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByIPVersionResponseResultMetaUnitJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByIPVersionResponseResultSummary0 struct {
	// A numeric string.
	IPv4 string `json:"IPv4,required"`
	// A numeric string.
	IPv6 string                                                   `json:"IPv6,required"`
	JSON radarHTTPSummaryGetByIPVersionResponseResultSummary0JSON `json:"-"`
}

// radarHTTPSummaryGetByIPVersionResponseResultSummary0JSON contains the JSON
// metadata for the struct [RadarHTTPSummaryGetByIPVersionResponseResultSummary0]
type radarHTTPSummaryGetByIPVersionResponseResultSummary0JSON struct {
	IPv4        apijson.Field
	IPv6        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByIPVersionResponseResultSummary0) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByIPVersionResponseResultSummary0JSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByOsResponse struct {
	Result  RadarHTTPSummaryGetByOsResponseResult `json:"result,required"`
	Success bool                                  `json:"success,required"`
	JSON    radarHTTPSummaryGetByOsResponseJSON   `json:"-"`
}

// radarHTTPSummaryGetByOsResponseJSON contains the JSON metadata for the struct
// [RadarHTTPSummaryGetByOsResponse]
type radarHTTPSummaryGetByOsResponseJSON struct {
	Result      apijson.Field
	Success     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByOsResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByOsResponseJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByOsResponseResult struct {
	// Metadata for the results.
	Meta     RadarHTTPSummaryGetByOsResponseResultMeta     `json:"meta,required"`
	Summary0 RadarHTTPSummaryGetByOsResponseResultSummary0 `json:"summary_0,required"`
	JSON     radarHTTPSummaryGetByOsResponseResultJSON     `json:"-"`
}

// radarHTTPSummaryGetByOsResponseResultJSON contains the JSON metadata for the
// struct [RadarHTTPSummaryGetByOsResponseResult]
type radarHTTPSummaryGetByOsResponseResultJSON struct {
	Meta        apijson.Field
	Summary0    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByOsResponseResult) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByOsResponseResultJSON) RawJSON() string {
	return r.raw
}

// Metadata for the results.
type RadarHTTPSummaryGetByOsResponseResultMeta struct {
	ConfidenceInfo RadarHTTPSummaryGetByOsResponseResultMetaConfidenceInfo `json:"confidenceInfo,required"`
	DateRange      []RadarHTTPSummaryGetByOsResponseResultMetaDateRange    `json:"dateRange,required"`
	// Timestamp of the last dataset update.
	LastUpdated time.Time `json:"lastUpdated,required" format:"date-time"`
	// Normalization method applied to the results. Refer to
	// [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/).
	Normalization RadarHTTPSummaryGetByOsResponseResultMetaNormalization `json:"normalization,required"`
	// Measurement units for the results.
	Units []RadarHTTPSummaryGetByOsResponseResultMetaUnit `json:"units,required"`
	JSON  radarHTTPSummaryGetByOsResponseResultMetaJSON   `json:"-"`
}

// radarHTTPSummaryGetByOsResponseResultMetaJSON contains the JSON metadata for the
// struct [RadarHTTPSummaryGetByOsResponseResultMeta]
type radarHTTPSummaryGetByOsResponseResultMetaJSON struct {
	ConfidenceInfo apijson.Field
	DateRange      apijson.Field
	LastUpdated    apijson.Field
	Normalization  apijson.Field
	Units          apijson.Field
	raw            string
	ExtraFields    map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByOsResponseResultMeta) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByOsResponseResultMetaJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByOsResponseResultMetaConfidenceInfo struct {
	Annotations []RadarHTTPSummaryGetByOsResponseResultMetaConfidenceInfoAnnotation `json:"annotations,required"`
	// Provides an indication of how much confidence Cloudflare has in the data.
	Level int64                                                       `json:"level,required"`
	JSON  radarHTTPSummaryGetByOsResponseResultMetaConfidenceInfoJSON `json:"-"`
}

// radarHTTPSummaryGetByOsResponseResultMetaConfidenceInfoJSON contains the JSON
// metadata for the struct
// [RadarHTTPSummaryGetByOsResponseResultMetaConfidenceInfo]
type radarHTTPSummaryGetByOsResponseResultMetaConfidenceInfoJSON struct {
	Annotations apijson.Field
	Level       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByOsResponseResultMetaConfidenceInfo) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByOsResponseResultMetaConfidenceInfoJSON) RawJSON() string {
	return r.raw
}

// Annotation associated with the result (e.g. outage or other type of event).
type RadarHTTPSummaryGetByOsResponseResultMetaConfidenceInfoAnnotation struct {
	DataSource  string    `json:"dataSource,required"`
	Description string    `json:"description,required"`
	EndDate     time.Time `json:"endDate,required" format:"date-time"`
	EventType   string    `json:"eventType,required"`
	// Whether event is a single point in time or a time range.
	IsInstantaneous bool                                                                  `json:"isInstantaneous,required"`
	LinkedURL       string                                                                `json:"linkedUrl,required" format:"uri"`
	StartDate       time.Time                                                             `json:"startDate,required" format:"date-time"`
	JSON            radarHTTPSummaryGetByOsResponseResultMetaConfidenceInfoAnnotationJSON `json:"-"`
}

// radarHTTPSummaryGetByOsResponseResultMetaConfidenceInfoAnnotationJSON contains
// the JSON metadata for the struct
// [RadarHTTPSummaryGetByOsResponseResultMetaConfidenceInfoAnnotation]
type radarHTTPSummaryGetByOsResponseResultMetaConfidenceInfoAnnotationJSON struct {
	DataSource      apijson.Field
	Description     apijson.Field
	EndDate         apijson.Field
	EventType       apijson.Field
	IsInstantaneous apijson.Field
	LinkedURL       apijson.Field
	StartDate       apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByOsResponseResultMetaConfidenceInfoAnnotation) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByOsResponseResultMetaConfidenceInfoAnnotationJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByOsResponseResultMetaDateRange struct {
	// Adjusted end of date range.
	EndTime time.Time `json:"endTime,required" format:"date-time"`
	// Adjusted start of date range.
	StartTime time.Time                                              `json:"startTime,required" format:"date-time"`
	JSON      radarHTTPSummaryGetByOsResponseResultMetaDateRangeJSON `json:"-"`
}

// radarHTTPSummaryGetByOsResponseResultMetaDateRangeJSON contains the JSON
// metadata for the struct [RadarHTTPSummaryGetByOsResponseResultMetaDateRange]
type radarHTTPSummaryGetByOsResponseResultMetaDateRangeJSON struct {
	EndTime     apijson.Field
	StartTime   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByOsResponseResultMetaDateRange) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByOsResponseResultMetaDateRangeJSON) RawJSON() string {
	return r.raw
}

// Normalization method applied to the results. Refer to
// [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/).
type RadarHTTPSummaryGetByOsResponseResultMetaNormalization string

const (
	RadarHTTPSummaryGetByOsResponseResultMetaNormalizationPercentage           RadarHTTPSummaryGetByOsResponseResultMetaNormalization = "PERCENTAGE"
	RadarHTTPSummaryGetByOsResponseResultMetaNormalizationMin0Max              RadarHTTPSummaryGetByOsResponseResultMetaNormalization = "MIN0_MAX"
	RadarHTTPSummaryGetByOsResponseResultMetaNormalizationMinMax               RadarHTTPSummaryGetByOsResponseResultMetaNormalization = "MIN_MAX"
	RadarHTTPSummaryGetByOsResponseResultMetaNormalizationRawValues            RadarHTTPSummaryGetByOsResponseResultMetaNormalization = "RAW_VALUES"
	RadarHTTPSummaryGetByOsResponseResultMetaNormalizationPercentageChange     RadarHTTPSummaryGetByOsResponseResultMetaNormalization = "PERCENTAGE_CHANGE"
	RadarHTTPSummaryGetByOsResponseResultMetaNormalizationRollingAverage       RadarHTTPSummaryGetByOsResponseResultMetaNormalization = "ROLLING_AVERAGE"
	RadarHTTPSummaryGetByOsResponseResultMetaNormalizationOverlappedPercentage RadarHTTPSummaryGetByOsResponseResultMetaNormalization = "OVERLAPPED_PERCENTAGE"
	RadarHTTPSummaryGetByOsResponseResultMetaNormalizationRatio                RadarHTTPSummaryGetByOsResponseResultMetaNormalization = "RATIO"
)

func (r RadarHTTPSummaryGetByOsResponseResultMetaNormalization) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByOsResponseResultMetaNormalizationPercentage, RadarHTTPSummaryGetByOsResponseResultMetaNormalizationMin0Max, RadarHTTPSummaryGetByOsResponseResultMetaNormalizationMinMax, RadarHTTPSummaryGetByOsResponseResultMetaNormalizationRawValues, RadarHTTPSummaryGetByOsResponseResultMetaNormalizationPercentageChange, RadarHTTPSummaryGetByOsResponseResultMetaNormalizationRollingAverage, RadarHTTPSummaryGetByOsResponseResultMetaNormalizationOverlappedPercentage, RadarHTTPSummaryGetByOsResponseResultMetaNormalizationRatio:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByOsResponseResultMetaUnit struct {
	Name  string                                            `json:"name,required"`
	Value string                                            `json:"value,required"`
	JSON  radarHTTPSummaryGetByOsResponseResultMetaUnitJSON `json:"-"`
}

// radarHTTPSummaryGetByOsResponseResultMetaUnitJSON contains the JSON metadata for
// the struct [RadarHTTPSummaryGetByOsResponseResultMetaUnit]
type radarHTTPSummaryGetByOsResponseResultMetaUnitJSON struct {
	Name        apijson.Field
	Value       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByOsResponseResultMetaUnit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByOsResponseResultMetaUnitJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByOsResponseResultSummary0 struct {
	// A numeric string.
	Android string `json:"ANDROID,required"`
	// A numeric string.
	Ios  string                                            `json:"IOS,required"`
	JSON radarHTTPSummaryGetByOsResponseResultSummary0JSON `json:"-"`
}

// radarHTTPSummaryGetByOsResponseResultSummary0JSON contains the JSON metadata for
// the struct [RadarHTTPSummaryGetByOsResponseResultSummary0]
type radarHTTPSummaryGetByOsResponseResultSummary0JSON struct {
	Android     apijson.Field
	Ios         apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByOsResponseResultSummary0) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByOsResponseResultSummary0JSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByPostQuantumResponse struct {
	Result  RadarHTTPSummaryGetByPostQuantumResponseResult `json:"result,required"`
	Success bool                                           `json:"success,required"`
	JSON    radarHTTPSummaryGetByPostQuantumResponseJSON   `json:"-"`
}

// radarHTTPSummaryGetByPostQuantumResponseJSON contains the JSON metadata for the
// struct [RadarHTTPSummaryGetByPostQuantumResponse]
type radarHTTPSummaryGetByPostQuantumResponseJSON struct {
	Result      apijson.Field
	Success     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByPostQuantumResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByPostQuantumResponseJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByPostQuantumResponseResult struct {
	// Metadata for the results.
	Meta     RadarHTTPSummaryGetByPostQuantumResponseResultMeta     `json:"meta,required"`
	Summary0 RadarHTTPSummaryGetByPostQuantumResponseResultSummary0 `json:"summary_0,required"`
	JSON     radarHTTPSummaryGetByPostQuantumResponseResultJSON     `json:"-"`
}

// radarHTTPSummaryGetByPostQuantumResponseResultJSON contains the JSON metadata
// for the struct [RadarHTTPSummaryGetByPostQuantumResponseResult]
type radarHTTPSummaryGetByPostQuantumResponseResultJSON struct {
	Meta        apijson.Field
	Summary0    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByPostQuantumResponseResult) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByPostQuantumResponseResultJSON) RawJSON() string {
	return r.raw
}

// Metadata for the results.
type RadarHTTPSummaryGetByPostQuantumResponseResultMeta struct {
	ConfidenceInfo RadarHTTPSummaryGetByPostQuantumResponseResultMetaConfidenceInfo `json:"confidenceInfo,required"`
	DateRange      []RadarHTTPSummaryGetByPostQuantumResponseResultMetaDateRange    `json:"dateRange,required"`
	// Timestamp of the last dataset update.
	LastUpdated time.Time `json:"lastUpdated,required" format:"date-time"`
	// Normalization method applied to the results. Refer to
	// [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/).
	Normalization RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalization `json:"normalization,required"`
	// Measurement units for the results.
	Units []RadarHTTPSummaryGetByPostQuantumResponseResultMetaUnit `json:"units,required"`
	JSON  radarHTTPSummaryGetByPostQuantumResponseResultMetaJSON   `json:"-"`
}

// radarHTTPSummaryGetByPostQuantumResponseResultMetaJSON contains the JSON
// metadata for the struct [RadarHTTPSummaryGetByPostQuantumResponseResultMeta]
type radarHTTPSummaryGetByPostQuantumResponseResultMetaJSON struct {
	ConfidenceInfo apijson.Field
	DateRange      apijson.Field
	LastUpdated    apijson.Field
	Normalization  apijson.Field
	Units          apijson.Field
	raw            string
	ExtraFields    map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByPostQuantumResponseResultMeta) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByPostQuantumResponseResultMetaJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByPostQuantumResponseResultMetaConfidenceInfo struct {
	Annotations []RadarHTTPSummaryGetByPostQuantumResponseResultMetaConfidenceInfoAnnotation `json:"annotations,required"`
	// Provides an indication of how much confidence Cloudflare has in the data.
	Level int64                                                                `json:"level,required"`
	JSON  radarHTTPSummaryGetByPostQuantumResponseResultMetaConfidenceInfoJSON `json:"-"`
}

// radarHTTPSummaryGetByPostQuantumResponseResultMetaConfidenceInfoJSON contains
// the JSON metadata for the struct
// [RadarHTTPSummaryGetByPostQuantumResponseResultMetaConfidenceInfo]
type radarHTTPSummaryGetByPostQuantumResponseResultMetaConfidenceInfoJSON struct {
	Annotations apijson.Field
	Level       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByPostQuantumResponseResultMetaConfidenceInfo) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByPostQuantumResponseResultMetaConfidenceInfoJSON) RawJSON() string {
	return r.raw
}

// Annotation associated with the result (e.g. outage or other type of event).
type RadarHTTPSummaryGetByPostQuantumResponseResultMetaConfidenceInfoAnnotation struct {
	DataSource  string    `json:"dataSource,required"`
	Description string    `json:"description,required"`
	EndDate     time.Time `json:"endDate,required" format:"date-time"`
	EventType   string    `json:"eventType,required"`
	// Whether event is a single point in time or a time range.
	IsInstantaneous bool                                                                           `json:"isInstantaneous,required"`
	LinkedURL       string                                                                         `json:"linkedUrl,required" format:"uri"`
	StartDate       time.Time                                                                      `json:"startDate,required" format:"date-time"`
	JSON            radarHTTPSummaryGetByPostQuantumResponseResultMetaConfidenceInfoAnnotationJSON `json:"-"`
}

// radarHTTPSummaryGetByPostQuantumResponseResultMetaConfidenceInfoAnnotationJSON
// contains the JSON metadata for the struct
// [RadarHTTPSummaryGetByPostQuantumResponseResultMetaConfidenceInfoAnnotation]
type radarHTTPSummaryGetByPostQuantumResponseResultMetaConfidenceInfoAnnotationJSON struct {
	DataSource      apijson.Field
	Description     apijson.Field
	EndDate         apijson.Field
	EventType       apijson.Field
	IsInstantaneous apijson.Field
	LinkedURL       apijson.Field
	StartDate       apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByPostQuantumResponseResultMetaConfidenceInfoAnnotation) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByPostQuantumResponseResultMetaConfidenceInfoAnnotationJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByPostQuantumResponseResultMetaDateRange struct {
	// Adjusted end of date range.
	EndTime time.Time `json:"endTime,required" format:"date-time"`
	// Adjusted start of date range.
	StartTime time.Time                                                       `json:"startTime,required" format:"date-time"`
	JSON      radarHTTPSummaryGetByPostQuantumResponseResultMetaDateRangeJSON `json:"-"`
}

// radarHTTPSummaryGetByPostQuantumResponseResultMetaDateRangeJSON contains the
// JSON metadata for the struct
// [RadarHTTPSummaryGetByPostQuantumResponseResultMetaDateRange]
type radarHTTPSummaryGetByPostQuantumResponseResultMetaDateRangeJSON struct {
	EndTime     apijson.Field
	StartTime   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByPostQuantumResponseResultMetaDateRange) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByPostQuantumResponseResultMetaDateRangeJSON) RawJSON() string {
	return r.raw
}

// Normalization method applied to the results. Refer to
// [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/).
type RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalization string

const (
	RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalizationPercentage           RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalization = "PERCENTAGE"
	RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalizationMin0Max              RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalization = "MIN0_MAX"
	RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalizationMinMax               RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalization = "MIN_MAX"
	RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalizationRawValues            RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalization = "RAW_VALUES"
	RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalizationPercentageChange     RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalization = "PERCENTAGE_CHANGE"
	RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalizationRollingAverage       RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalization = "ROLLING_AVERAGE"
	RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalizationOverlappedPercentage RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalization = "OVERLAPPED_PERCENTAGE"
	RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalizationRatio                RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalization = "RATIO"
)

func (r RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalization) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalizationPercentage, RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalizationMin0Max, RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalizationMinMax, RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalizationRawValues, RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalizationPercentageChange, RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalizationRollingAverage, RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalizationOverlappedPercentage, RadarHTTPSummaryGetByPostQuantumResponseResultMetaNormalizationRatio:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByPostQuantumResponseResultMetaUnit struct {
	Name  string                                                     `json:"name,required"`
	Value string                                                     `json:"value,required"`
	JSON  radarHTTPSummaryGetByPostQuantumResponseResultMetaUnitJSON `json:"-"`
}

// radarHTTPSummaryGetByPostQuantumResponseResultMetaUnitJSON contains the JSON
// metadata for the struct [RadarHTTPSummaryGetByPostQuantumResponseResultMetaUnit]
type radarHTTPSummaryGetByPostQuantumResponseResultMetaUnitJSON struct {
	Name        apijson.Field
	Value       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByPostQuantumResponseResultMetaUnit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByPostQuantumResponseResultMetaUnitJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByPostQuantumResponseResultSummary0 struct {
	// A numeric string.
	NotSupported string `json:"NOT_SUPPORTED,required"`
	// A numeric string.
	Supported string                                                     `json:"SUPPORTED,required"`
	JSON      radarHTTPSummaryGetByPostQuantumResponseResultSummary0JSON `json:"-"`
}

// radarHTTPSummaryGetByPostQuantumResponseResultSummary0JSON contains the JSON
// metadata for the struct [RadarHTTPSummaryGetByPostQuantumResponseResultSummary0]
type radarHTTPSummaryGetByPostQuantumResponseResultSummary0JSON struct {
	NotSupported apijson.Field
	Supported    apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByPostQuantumResponseResultSummary0) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByPostQuantumResponseResultSummary0JSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByTlsVersionResponse struct {
	Result  RadarHTTPSummaryGetByTlsVersionResponseResult `json:"result,required"`
	Success bool                                          `json:"success,required"`
	JSON    radarHTTPSummaryGetByTlsVersionResponseJSON   `json:"-"`
}

// radarHTTPSummaryGetByTlsVersionResponseJSON contains the JSON metadata for the
// struct [RadarHTTPSummaryGetByTlsVersionResponse]
type radarHTTPSummaryGetByTlsVersionResponseJSON struct {
	Result      apijson.Field
	Success     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByTlsVersionResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByTlsVersionResponseJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByTlsVersionResponseResult struct {
	// Metadata for the results.
	Meta     RadarHTTPSummaryGetByTlsVersionResponseResultMeta     `json:"meta,required"`
	Summary0 RadarHTTPSummaryGetByTlsVersionResponseResultSummary0 `json:"summary_0,required"`
	JSON     radarHTTPSummaryGetByTlsVersionResponseResultJSON     `json:"-"`
}

// radarHTTPSummaryGetByTlsVersionResponseResultJSON contains the JSON metadata for
// the struct [RadarHTTPSummaryGetByTlsVersionResponseResult]
type radarHTTPSummaryGetByTlsVersionResponseResultJSON struct {
	Meta        apijson.Field
	Summary0    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByTlsVersionResponseResult) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByTlsVersionResponseResultJSON) RawJSON() string {
	return r.raw
}

// Metadata for the results.
type RadarHTTPSummaryGetByTlsVersionResponseResultMeta struct {
	ConfidenceInfo RadarHTTPSummaryGetByTlsVersionResponseResultMetaConfidenceInfo `json:"confidenceInfo,required"`
	DateRange      []RadarHTTPSummaryGetByTlsVersionResponseResultMetaDateRange    `json:"dateRange,required"`
	// Timestamp of the last dataset update.
	LastUpdated time.Time `json:"lastUpdated,required" format:"date-time"`
	// Normalization method applied to the results. Refer to
	// [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/).
	Normalization RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalization `json:"normalization,required"`
	// Measurement units for the results.
	Units []RadarHTTPSummaryGetByTlsVersionResponseResultMetaUnit `json:"units,required"`
	JSON  radarHTTPSummaryGetByTlsVersionResponseResultMetaJSON   `json:"-"`
}

// radarHTTPSummaryGetByTlsVersionResponseResultMetaJSON contains the JSON metadata
// for the struct [RadarHTTPSummaryGetByTlsVersionResponseResultMeta]
type radarHTTPSummaryGetByTlsVersionResponseResultMetaJSON struct {
	ConfidenceInfo apijson.Field
	DateRange      apijson.Field
	LastUpdated    apijson.Field
	Normalization  apijson.Field
	Units          apijson.Field
	raw            string
	ExtraFields    map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByTlsVersionResponseResultMeta) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByTlsVersionResponseResultMetaJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByTlsVersionResponseResultMetaConfidenceInfo struct {
	Annotations []RadarHTTPSummaryGetByTlsVersionResponseResultMetaConfidenceInfoAnnotation `json:"annotations,required"`
	// Provides an indication of how much confidence Cloudflare has in the data.
	Level int64                                                               `json:"level,required"`
	JSON  radarHTTPSummaryGetByTlsVersionResponseResultMetaConfidenceInfoJSON `json:"-"`
}

// radarHTTPSummaryGetByTlsVersionResponseResultMetaConfidenceInfoJSON contains the
// JSON metadata for the struct
// [RadarHTTPSummaryGetByTlsVersionResponseResultMetaConfidenceInfo]
type radarHTTPSummaryGetByTlsVersionResponseResultMetaConfidenceInfoJSON struct {
	Annotations apijson.Field
	Level       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByTlsVersionResponseResultMetaConfidenceInfo) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByTlsVersionResponseResultMetaConfidenceInfoJSON) RawJSON() string {
	return r.raw
}

// Annotation associated with the result (e.g. outage or other type of event).
type RadarHTTPSummaryGetByTlsVersionResponseResultMetaConfidenceInfoAnnotation struct {
	DataSource  string    `json:"dataSource,required"`
	Description string    `json:"description,required"`
	EndDate     time.Time `json:"endDate,required" format:"date-time"`
	EventType   string    `json:"eventType,required"`
	// Whether event is a single point in time or a time range.
	IsInstantaneous bool                                                                          `json:"isInstantaneous,required"`
	LinkedURL       string                                                                        `json:"linkedUrl,required" format:"uri"`
	StartDate       time.Time                                                                     `json:"startDate,required" format:"date-time"`
	JSON            radarHTTPSummaryGetByTlsVersionResponseResultMetaConfidenceInfoAnnotationJSON `json:"-"`
}

// radarHTTPSummaryGetByTlsVersionResponseResultMetaConfidenceInfoAnnotationJSON
// contains the JSON metadata for the struct
// [RadarHTTPSummaryGetByTlsVersionResponseResultMetaConfidenceInfoAnnotation]
type radarHTTPSummaryGetByTlsVersionResponseResultMetaConfidenceInfoAnnotationJSON struct {
	DataSource      apijson.Field
	Description     apijson.Field
	EndDate         apijson.Field
	EventType       apijson.Field
	IsInstantaneous apijson.Field
	LinkedURL       apijson.Field
	StartDate       apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByTlsVersionResponseResultMetaConfidenceInfoAnnotation) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByTlsVersionResponseResultMetaConfidenceInfoAnnotationJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByTlsVersionResponseResultMetaDateRange struct {
	// Adjusted end of date range.
	EndTime time.Time `json:"endTime,required" format:"date-time"`
	// Adjusted start of date range.
	StartTime time.Time                                                      `json:"startTime,required" format:"date-time"`
	JSON      radarHTTPSummaryGetByTlsVersionResponseResultMetaDateRangeJSON `json:"-"`
}

// radarHTTPSummaryGetByTlsVersionResponseResultMetaDateRangeJSON contains the JSON
// metadata for the struct
// [RadarHTTPSummaryGetByTlsVersionResponseResultMetaDateRange]
type radarHTTPSummaryGetByTlsVersionResponseResultMetaDateRangeJSON struct {
	EndTime     apijson.Field
	StartTime   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByTlsVersionResponseResultMetaDateRange) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByTlsVersionResponseResultMetaDateRangeJSON) RawJSON() string {
	return r.raw
}

// Normalization method applied to the results. Refer to
// [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/).
type RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalization string

const (
	RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalizationPercentage           RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalization = "PERCENTAGE"
	RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalizationMin0Max              RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalization = "MIN0_MAX"
	RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalizationMinMax               RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalization = "MIN_MAX"
	RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalizationRawValues            RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalization = "RAW_VALUES"
	RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalizationPercentageChange     RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalization = "PERCENTAGE_CHANGE"
	RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalizationRollingAverage       RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalization = "ROLLING_AVERAGE"
	RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalizationOverlappedPercentage RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalization = "OVERLAPPED_PERCENTAGE"
	RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalizationRatio                RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalization = "RATIO"
)

func (r RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalization) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalizationPercentage, RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalizationMin0Max, RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalizationMinMax, RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalizationRawValues, RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalizationPercentageChange, RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalizationRollingAverage, RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalizationOverlappedPercentage, RadarHTTPSummaryGetByTlsVersionResponseResultMetaNormalizationRatio:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByTlsVersionResponseResultMetaUnit struct {
	Name  string                                                    `json:"name,required"`
	Value string                                                    `json:"value,required"`
	JSON  radarHTTPSummaryGetByTlsVersionResponseResultMetaUnitJSON `json:"-"`
}

// radarHTTPSummaryGetByTlsVersionResponseResultMetaUnitJSON contains the JSON
// metadata for the struct [RadarHTTPSummaryGetByTlsVersionResponseResultMetaUnit]
type radarHTTPSummaryGetByTlsVersionResponseResultMetaUnitJSON struct {
	Name        apijson.Field
	Value       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByTlsVersionResponseResultMetaUnit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByTlsVersionResponseResultMetaUnitJSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByTlsVersionResponseResultSummary0 struct {
	// A numeric string.
	Tls1_0 string `json:"TLS 1.0,required"`
	// A numeric string.
	Tls1_1 string `json:"TLS 1.1,required"`
	// A numeric string.
	Tls1_2 string `json:"TLS 1.2,required"`
	// A numeric string.
	Tls1_3 string `json:"TLS 1.3,required"`
	// A numeric string.
	TlsQuic string                                                    `json:"TLS QUIC,required"`
	JSON    radarHTTPSummaryGetByTlsVersionResponseResultSummary0JSON `json:"-"`
}

// radarHTTPSummaryGetByTlsVersionResponseResultSummary0JSON contains the JSON
// metadata for the struct [RadarHTTPSummaryGetByTlsVersionResponseResultSummary0]
type radarHTTPSummaryGetByTlsVersionResponseResultSummary0JSON struct {
	Tls1_0      apijson.Field
	Tls1_1      apijson.Field
	Tls1_2      apijson.Field
	Tls1_3      apijson.Field
	TlsQuic     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryGetByTlsVersionResponseResultSummary0) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r radarHTTPSummaryGetByTlsVersionResponseResultSummary0JSON) RawJSON() string {
	return r.raw
}

type RadarHTTPSummaryGetByBotClassParams struct {
	// Filters results by Autonomous System. Specify one or more Autonomous System
	// Numbers (ASNs) as a comma-separated list. Prefix with `-` to exclude ASNs from
	// results. For example, `-174, 3356` excludes results from AS174, but includes
	// results from AS3356.
	Asn param.Field[[]string] `query:"asn"`
	// Filters results by browser family.
	BrowserFamily param.Field[[]RadarHTTPSummaryGetByBotClassParamsBrowserFamily] `query:"browserFamily"`
	// Filters results by continent. Specify a comma-separated list of alpha-2 codes.
	// Prefix with `-` to exclude continents from results. For example, `-EU,NA`
	// excludes results from EU, but includes results from NA.
	Continent param.Field[[]string] `query:"continent"`
	// End of the date range (inclusive).
	DateEnd param.Field[[]time.Time] `query:"dateEnd" format:"date-time"`
	// Filters results by date range. For example, use `7d` and `7dcontrol` to compare
	// this week with the previous week. Use this parameter or set specific start and
	// end dates (`dateStart` and `dateEnd` parameters).
	DateRange param.Field[[]string] `query:"dateRange"`
	// Start of the date range.
	DateStart param.Field[[]time.Time] `query:"dateStart" format:"date-time"`
	// Filters results by device type.
	DeviceType param.Field[[]RadarHTTPSummaryGetByBotClassParamsDeviceType] `query:"deviceType"`
	// Format in which results will be returned.
	Format param.Field[RadarHTTPSummaryGetByBotClassParamsFormat] `query:"format"`
	// Filters results by HTTP protocol (HTTP vs. HTTPS).
	HTTPProtocol param.Field[[]RadarHTTPSummaryGetByBotClassParamsHTTPProtocol] `query:"httpProtocol"`
	// Filters results by HTTP version.
	HTTPVersion param.Field[[]RadarHTTPSummaryGetByBotClassParamsHTTPVersion] `query:"httpVersion"`
	// Filters results by IP version (Ipv4 vs. IPv6).
	IPVersion param.Field[[]RadarHTTPSummaryGetByBotClassParamsIPVersion] `query:"ipVersion"`
	// Filters results by location. Specify a comma-separated list of alpha-2 codes.
	// Prefix with `-` to exclude locations from results. For example, `-US,PT`
	// excludes results from the US, but includes results from PT.
	Location param.Field[[]string] `query:"location"`
	// Array of names used to label the series in the response.
	Name param.Field[[]string] `query:"name"`
	// Filters results by operating system.
	Os param.Field[[]RadarHTTPSummaryGetByBotClassParamsO] `query:"os"`
	// Filters results by TLS version.
	TlsVersion param.Field[[]RadarHTTPSummaryGetByBotClassParamsTlsVersion] `query:"tlsVersion"`
}

// URLQuery serializes [RadarHTTPSummaryGetByBotClassParams]'s query parameters as
// `url.Values`.
func (r RadarHTTPSummaryGetByBotClassParams) URLQuery() (v url.Values) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type RadarHTTPSummaryGetByBotClassParamsBrowserFamily string

const (
	RadarHTTPSummaryGetByBotClassParamsBrowserFamilyChrome  RadarHTTPSummaryGetByBotClassParamsBrowserFamily = "CHROME"
	RadarHTTPSummaryGetByBotClassParamsBrowserFamilyEdge    RadarHTTPSummaryGetByBotClassParamsBrowserFamily = "EDGE"
	RadarHTTPSummaryGetByBotClassParamsBrowserFamilyFirefox RadarHTTPSummaryGetByBotClassParamsBrowserFamily = "FIREFOX"
	RadarHTTPSummaryGetByBotClassParamsBrowserFamilySafari  RadarHTTPSummaryGetByBotClassParamsBrowserFamily = "SAFARI"
)

func (r RadarHTTPSummaryGetByBotClassParamsBrowserFamily) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByBotClassParamsBrowserFamilyChrome, RadarHTTPSummaryGetByBotClassParamsBrowserFamilyEdge, RadarHTTPSummaryGetByBotClassParamsBrowserFamilyFirefox, RadarHTTPSummaryGetByBotClassParamsBrowserFamilySafari:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByBotClassParamsDeviceType string

const (
	RadarHTTPSummaryGetByBotClassParamsDeviceTypeDesktop RadarHTTPSummaryGetByBotClassParamsDeviceType = "DESKTOP"
	RadarHTTPSummaryGetByBotClassParamsDeviceTypeMobile  RadarHTTPSummaryGetByBotClassParamsDeviceType = "MOBILE"
	RadarHTTPSummaryGetByBotClassParamsDeviceTypeOther   RadarHTTPSummaryGetByBotClassParamsDeviceType = "OTHER"
)

func (r RadarHTTPSummaryGetByBotClassParamsDeviceType) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByBotClassParamsDeviceTypeDesktop, RadarHTTPSummaryGetByBotClassParamsDeviceTypeMobile, RadarHTTPSummaryGetByBotClassParamsDeviceTypeOther:
		return true
	}
	return false
}

// Format in which results will be returned.
type RadarHTTPSummaryGetByBotClassParamsFormat string

const (
	RadarHTTPSummaryGetByBotClassParamsFormatJson RadarHTTPSummaryGetByBotClassParamsFormat = "JSON"
	RadarHTTPSummaryGetByBotClassParamsFormatCsv  RadarHTTPSummaryGetByBotClassParamsFormat = "CSV"
)

func (r RadarHTTPSummaryGetByBotClassParamsFormat) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByBotClassParamsFormatJson, RadarHTTPSummaryGetByBotClassParamsFormatCsv:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByBotClassParamsHTTPProtocol string

const (
	RadarHTTPSummaryGetByBotClassParamsHTTPProtocolHTTP  RadarHTTPSummaryGetByBotClassParamsHTTPProtocol = "HTTP"
	RadarHTTPSummaryGetByBotClassParamsHTTPProtocolHTTPS RadarHTTPSummaryGetByBotClassParamsHTTPProtocol = "HTTPS"
)

func (r RadarHTTPSummaryGetByBotClassParamsHTTPProtocol) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByBotClassParamsHTTPProtocolHTTP, RadarHTTPSummaryGetByBotClassParamsHTTPProtocolHTTPS:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByBotClassParamsHTTPVersion string

const (
	RadarHTTPSummaryGetByBotClassParamsHTTPVersionHttPv1 RadarHTTPSummaryGetByBotClassParamsHTTPVersion = "HTTPv1"
	RadarHTTPSummaryGetByBotClassParamsHTTPVersionHttPv2 RadarHTTPSummaryGetByBotClassParamsHTTPVersion = "HTTPv2"
	RadarHTTPSummaryGetByBotClassParamsHTTPVersionHttPv3 RadarHTTPSummaryGetByBotClassParamsHTTPVersion = "HTTPv3"
)

func (r RadarHTTPSummaryGetByBotClassParamsHTTPVersion) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByBotClassParamsHTTPVersionHttPv1, RadarHTTPSummaryGetByBotClassParamsHTTPVersionHttPv2, RadarHTTPSummaryGetByBotClassParamsHTTPVersionHttPv3:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByBotClassParamsIPVersion string

const (
	RadarHTTPSummaryGetByBotClassParamsIPVersionIPv4 RadarHTTPSummaryGetByBotClassParamsIPVersion = "IPv4"
	RadarHTTPSummaryGetByBotClassParamsIPVersionIPv6 RadarHTTPSummaryGetByBotClassParamsIPVersion = "IPv6"
)

func (r RadarHTTPSummaryGetByBotClassParamsIPVersion) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByBotClassParamsIPVersionIPv4, RadarHTTPSummaryGetByBotClassParamsIPVersionIPv6:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByBotClassParamsO string

const (
	RadarHTTPSummaryGetByBotClassParamsOWindows  RadarHTTPSummaryGetByBotClassParamsO = "WINDOWS"
	RadarHTTPSummaryGetByBotClassParamsOMacosx   RadarHTTPSummaryGetByBotClassParamsO = "MACOSX"
	RadarHTTPSummaryGetByBotClassParamsOIos      RadarHTTPSummaryGetByBotClassParamsO = "IOS"
	RadarHTTPSummaryGetByBotClassParamsOAndroid  RadarHTTPSummaryGetByBotClassParamsO = "ANDROID"
	RadarHTTPSummaryGetByBotClassParamsOChromeos RadarHTTPSummaryGetByBotClassParamsO = "CHROMEOS"
	RadarHTTPSummaryGetByBotClassParamsOLinux    RadarHTTPSummaryGetByBotClassParamsO = "LINUX"
	RadarHTTPSummaryGetByBotClassParamsOSmartTv  RadarHTTPSummaryGetByBotClassParamsO = "SMART_TV"
)

func (r RadarHTTPSummaryGetByBotClassParamsO) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByBotClassParamsOWindows, RadarHTTPSummaryGetByBotClassParamsOMacosx, RadarHTTPSummaryGetByBotClassParamsOIos, RadarHTTPSummaryGetByBotClassParamsOAndroid, RadarHTTPSummaryGetByBotClassParamsOChromeos, RadarHTTPSummaryGetByBotClassParamsOLinux, RadarHTTPSummaryGetByBotClassParamsOSmartTv:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByBotClassParamsTlsVersion string

const (
	RadarHTTPSummaryGetByBotClassParamsTlsVersionTlSv1_0  RadarHTTPSummaryGetByBotClassParamsTlsVersion = "TLSv1_0"
	RadarHTTPSummaryGetByBotClassParamsTlsVersionTlSv1_1  RadarHTTPSummaryGetByBotClassParamsTlsVersion = "TLSv1_1"
	RadarHTTPSummaryGetByBotClassParamsTlsVersionTlSv1_2  RadarHTTPSummaryGetByBotClassParamsTlsVersion = "TLSv1_2"
	RadarHTTPSummaryGetByBotClassParamsTlsVersionTlSv1_3  RadarHTTPSummaryGetByBotClassParamsTlsVersion = "TLSv1_3"
	RadarHTTPSummaryGetByBotClassParamsTlsVersionTlSvQuic RadarHTTPSummaryGetByBotClassParamsTlsVersion = "TLSvQUIC"
)

func (r RadarHTTPSummaryGetByBotClassParamsTlsVersion) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByBotClassParamsTlsVersionTlSv1_0, RadarHTTPSummaryGetByBotClassParamsTlsVersionTlSv1_1, RadarHTTPSummaryGetByBotClassParamsTlsVersionTlSv1_2, RadarHTTPSummaryGetByBotClassParamsTlsVersionTlSv1_3, RadarHTTPSummaryGetByBotClassParamsTlsVersionTlSvQuic:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByDeviceTypeParams struct {
	// Filters results by Autonomous System. Specify one or more Autonomous System
	// Numbers (ASNs) as a comma-separated list. Prefix with `-` to exclude ASNs from
	// results. For example, `-174, 3356` excludes results from AS174, but includes
	// results from AS3356.
	Asn param.Field[[]string] `query:"asn"`
	// Filters results by bot class. Refer to
	// [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/).
	BotClass param.Field[[]RadarHTTPSummaryGetByDeviceTypeParamsBotClass] `query:"botClass"`
	// Filters results by browser family.
	BrowserFamily param.Field[[]RadarHTTPSummaryGetByDeviceTypeParamsBrowserFamily] `query:"browserFamily"`
	// Filters results by continent. Specify a comma-separated list of alpha-2 codes.
	// Prefix with `-` to exclude continents from results. For example, `-EU,NA`
	// excludes results from EU, but includes results from NA.
	Continent param.Field[[]string] `query:"continent"`
	// End of the date range (inclusive).
	DateEnd param.Field[[]time.Time] `query:"dateEnd" format:"date-time"`
	// Filters results by date range. For example, use `7d` and `7dcontrol` to compare
	// this week with the previous week. Use this parameter or set specific start and
	// end dates (`dateStart` and `dateEnd` parameters).
	DateRange param.Field[[]string] `query:"dateRange"`
	// Start of the date range.
	DateStart param.Field[[]time.Time] `query:"dateStart" format:"date-time"`
	// Format in which results will be returned.
	Format param.Field[RadarHTTPSummaryGetByDeviceTypeParamsFormat] `query:"format"`
	// Filters results by HTTP protocol (HTTP vs. HTTPS).
	HTTPProtocol param.Field[[]RadarHTTPSummaryGetByDeviceTypeParamsHTTPProtocol] `query:"httpProtocol"`
	// Filters results by HTTP version.
	HTTPVersion param.Field[[]RadarHTTPSummaryGetByDeviceTypeParamsHTTPVersion] `query:"httpVersion"`
	// Filters results by IP version (Ipv4 vs. IPv6).
	IPVersion param.Field[[]RadarHTTPSummaryGetByDeviceTypeParamsIPVersion] `query:"ipVersion"`
	// Filters results by location. Specify a comma-separated list of alpha-2 codes.
	// Prefix with `-` to exclude locations from results. For example, `-US,PT`
	// excludes results from the US, but includes results from PT.
	Location param.Field[[]string] `query:"location"`
	// Array of names used to label the series in the response.
	Name param.Field[[]string] `query:"name"`
	// Filters results by operating system.
	Os param.Field[[]RadarHTTPSummaryGetByDeviceTypeParamsO] `query:"os"`
	// Filters results by TLS version.
	TlsVersion param.Field[[]RadarHTTPSummaryGetByDeviceTypeParamsTlsVersion] `query:"tlsVersion"`
}

// URLQuery serializes [RadarHTTPSummaryGetByDeviceTypeParams]'s query parameters
// as `url.Values`.
func (r RadarHTTPSummaryGetByDeviceTypeParams) URLQuery() (v url.Values) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type RadarHTTPSummaryGetByDeviceTypeParamsBotClass string

const (
	RadarHTTPSummaryGetByDeviceTypeParamsBotClassLikelyAutomated RadarHTTPSummaryGetByDeviceTypeParamsBotClass = "LIKELY_AUTOMATED"
	RadarHTTPSummaryGetByDeviceTypeParamsBotClassLikelyHuman     RadarHTTPSummaryGetByDeviceTypeParamsBotClass = "LIKELY_HUMAN"
)

func (r RadarHTTPSummaryGetByDeviceTypeParamsBotClass) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByDeviceTypeParamsBotClassLikelyAutomated, RadarHTTPSummaryGetByDeviceTypeParamsBotClassLikelyHuman:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByDeviceTypeParamsBrowserFamily string

const (
	RadarHTTPSummaryGetByDeviceTypeParamsBrowserFamilyChrome  RadarHTTPSummaryGetByDeviceTypeParamsBrowserFamily = "CHROME"
	RadarHTTPSummaryGetByDeviceTypeParamsBrowserFamilyEdge    RadarHTTPSummaryGetByDeviceTypeParamsBrowserFamily = "EDGE"
	RadarHTTPSummaryGetByDeviceTypeParamsBrowserFamilyFirefox RadarHTTPSummaryGetByDeviceTypeParamsBrowserFamily = "FIREFOX"
	RadarHTTPSummaryGetByDeviceTypeParamsBrowserFamilySafari  RadarHTTPSummaryGetByDeviceTypeParamsBrowserFamily = "SAFARI"
)

func (r RadarHTTPSummaryGetByDeviceTypeParamsBrowserFamily) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByDeviceTypeParamsBrowserFamilyChrome, RadarHTTPSummaryGetByDeviceTypeParamsBrowserFamilyEdge, RadarHTTPSummaryGetByDeviceTypeParamsBrowserFamilyFirefox, RadarHTTPSummaryGetByDeviceTypeParamsBrowserFamilySafari:
		return true
	}
	return false
}

// Format in which results will be returned.
type RadarHTTPSummaryGetByDeviceTypeParamsFormat string

const (
	RadarHTTPSummaryGetByDeviceTypeParamsFormatJson RadarHTTPSummaryGetByDeviceTypeParamsFormat = "JSON"
	RadarHTTPSummaryGetByDeviceTypeParamsFormatCsv  RadarHTTPSummaryGetByDeviceTypeParamsFormat = "CSV"
)

func (r RadarHTTPSummaryGetByDeviceTypeParamsFormat) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByDeviceTypeParamsFormatJson, RadarHTTPSummaryGetByDeviceTypeParamsFormatCsv:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByDeviceTypeParamsHTTPProtocol string

const (
	RadarHTTPSummaryGetByDeviceTypeParamsHTTPProtocolHTTP  RadarHTTPSummaryGetByDeviceTypeParamsHTTPProtocol = "HTTP"
	RadarHTTPSummaryGetByDeviceTypeParamsHTTPProtocolHTTPS RadarHTTPSummaryGetByDeviceTypeParamsHTTPProtocol = "HTTPS"
)

func (r RadarHTTPSummaryGetByDeviceTypeParamsHTTPProtocol) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByDeviceTypeParamsHTTPProtocolHTTP, RadarHTTPSummaryGetByDeviceTypeParamsHTTPProtocolHTTPS:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByDeviceTypeParamsHTTPVersion string

const (
	RadarHTTPSummaryGetByDeviceTypeParamsHTTPVersionHttPv1 RadarHTTPSummaryGetByDeviceTypeParamsHTTPVersion = "HTTPv1"
	RadarHTTPSummaryGetByDeviceTypeParamsHTTPVersionHttPv2 RadarHTTPSummaryGetByDeviceTypeParamsHTTPVersion = "HTTPv2"
	RadarHTTPSummaryGetByDeviceTypeParamsHTTPVersionHttPv3 RadarHTTPSummaryGetByDeviceTypeParamsHTTPVersion = "HTTPv3"
)

func (r RadarHTTPSummaryGetByDeviceTypeParamsHTTPVersion) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByDeviceTypeParamsHTTPVersionHttPv1, RadarHTTPSummaryGetByDeviceTypeParamsHTTPVersionHttPv2, RadarHTTPSummaryGetByDeviceTypeParamsHTTPVersionHttPv3:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByDeviceTypeParamsIPVersion string

const (
	RadarHTTPSummaryGetByDeviceTypeParamsIPVersionIPv4 RadarHTTPSummaryGetByDeviceTypeParamsIPVersion = "IPv4"
	RadarHTTPSummaryGetByDeviceTypeParamsIPVersionIPv6 RadarHTTPSummaryGetByDeviceTypeParamsIPVersion = "IPv6"
)

func (r RadarHTTPSummaryGetByDeviceTypeParamsIPVersion) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByDeviceTypeParamsIPVersionIPv4, RadarHTTPSummaryGetByDeviceTypeParamsIPVersionIPv6:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByDeviceTypeParamsO string

const (
	RadarHTTPSummaryGetByDeviceTypeParamsOWindows  RadarHTTPSummaryGetByDeviceTypeParamsO = "WINDOWS"
	RadarHTTPSummaryGetByDeviceTypeParamsOMacosx   RadarHTTPSummaryGetByDeviceTypeParamsO = "MACOSX"
	RadarHTTPSummaryGetByDeviceTypeParamsOIos      RadarHTTPSummaryGetByDeviceTypeParamsO = "IOS"
	RadarHTTPSummaryGetByDeviceTypeParamsOAndroid  RadarHTTPSummaryGetByDeviceTypeParamsO = "ANDROID"
	RadarHTTPSummaryGetByDeviceTypeParamsOChromeos RadarHTTPSummaryGetByDeviceTypeParamsO = "CHROMEOS"
	RadarHTTPSummaryGetByDeviceTypeParamsOLinux    RadarHTTPSummaryGetByDeviceTypeParamsO = "LINUX"
	RadarHTTPSummaryGetByDeviceTypeParamsOSmartTv  RadarHTTPSummaryGetByDeviceTypeParamsO = "SMART_TV"
)

func (r RadarHTTPSummaryGetByDeviceTypeParamsO) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByDeviceTypeParamsOWindows, RadarHTTPSummaryGetByDeviceTypeParamsOMacosx, RadarHTTPSummaryGetByDeviceTypeParamsOIos, RadarHTTPSummaryGetByDeviceTypeParamsOAndroid, RadarHTTPSummaryGetByDeviceTypeParamsOChromeos, RadarHTTPSummaryGetByDeviceTypeParamsOLinux, RadarHTTPSummaryGetByDeviceTypeParamsOSmartTv:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByDeviceTypeParamsTlsVersion string

const (
	RadarHTTPSummaryGetByDeviceTypeParamsTlsVersionTlSv1_0  RadarHTTPSummaryGetByDeviceTypeParamsTlsVersion = "TLSv1_0"
	RadarHTTPSummaryGetByDeviceTypeParamsTlsVersionTlSv1_1  RadarHTTPSummaryGetByDeviceTypeParamsTlsVersion = "TLSv1_1"
	RadarHTTPSummaryGetByDeviceTypeParamsTlsVersionTlSv1_2  RadarHTTPSummaryGetByDeviceTypeParamsTlsVersion = "TLSv1_2"
	RadarHTTPSummaryGetByDeviceTypeParamsTlsVersionTlSv1_3  RadarHTTPSummaryGetByDeviceTypeParamsTlsVersion = "TLSv1_3"
	RadarHTTPSummaryGetByDeviceTypeParamsTlsVersionTlSvQuic RadarHTTPSummaryGetByDeviceTypeParamsTlsVersion = "TLSvQUIC"
)

func (r RadarHTTPSummaryGetByDeviceTypeParamsTlsVersion) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByDeviceTypeParamsTlsVersionTlSv1_0, RadarHTTPSummaryGetByDeviceTypeParamsTlsVersionTlSv1_1, RadarHTTPSummaryGetByDeviceTypeParamsTlsVersionTlSv1_2, RadarHTTPSummaryGetByDeviceTypeParamsTlsVersionTlSv1_3, RadarHTTPSummaryGetByDeviceTypeParamsTlsVersionTlSvQuic:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByHTTPProtocolParams struct {
	// Filters results by Autonomous System. Specify one or more Autonomous System
	// Numbers (ASNs) as a comma-separated list. Prefix with `-` to exclude ASNs from
	// results. For example, `-174, 3356` excludes results from AS174, but includes
	// results from AS3356.
	Asn param.Field[[]string] `query:"asn"`
	// Filters results by bot class. Refer to
	// [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/).
	BotClass param.Field[[]RadarHTTPSummaryGetByHTTPProtocolParamsBotClass] `query:"botClass"`
	// Filters results by browser family.
	BrowserFamily param.Field[[]RadarHTTPSummaryGetByHTTPProtocolParamsBrowserFamily] `query:"browserFamily"`
	// Filters results by continent. Specify a comma-separated list of alpha-2 codes.
	// Prefix with `-` to exclude continents from results. For example, `-EU,NA`
	// excludes results from EU, but includes results from NA.
	Continent param.Field[[]string] `query:"continent"`
	// End of the date range (inclusive).
	DateEnd param.Field[[]time.Time] `query:"dateEnd" format:"date-time"`
	// Filters results by date range. For example, use `7d` and `7dcontrol` to compare
	// this week with the previous week. Use this parameter or set specific start and
	// end dates (`dateStart` and `dateEnd` parameters).
	DateRange param.Field[[]string] `query:"dateRange"`
	// Start of the date range.
	DateStart param.Field[[]time.Time] `query:"dateStart" format:"date-time"`
	// Filters results by device type.
	DeviceType param.Field[[]RadarHTTPSummaryGetByHTTPProtocolParamsDeviceType] `query:"deviceType"`
	// Format in which results will be returned.
	Format param.Field[RadarHTTPSummaryGetByHTTPProtocolParamsFormat] `query:"format"`
	// Filters results by HTTP version.
	HTTPVersion param.Field[[]RadarHTTPSummaryGetByHTTPProtocolParamsHTTPVersion] `query:"httpVersion"`
	// Filters results by IP version (Ipv4 vs. IPv6).
	IPVersion param.Field[[]RadarHTTPSummaryGetByHTTPProtocolParamsIPVersion] `query:"ipVersion"`
	// Filters results by location. Specify a comma-separated list of alpha-2 codes.
	// Prefix with `-` to exclude locations from results. For example, `-US,PT`
	// excludes results from the US, but includes results from PT.
	Location param.Field[[]string] `query:"location"`
	// Array of names used to label the series in the response.
	Name param.Field[[]string] `query:"name"`
	// Filters results by operating system.
	Os param.Field[[]RadarHTTPSummaryGetByHTTPProtocolParamsO] `query:"os"`
	// Filters results by TLS version.
	TlsVersion param.Field[[]RadarHTTPSummaryGetByHTTPProtocolParamsTlsVersion] `query:"tlsVersion"`
}

// URLQuery serializes [RadarHTTPSummaryGetByHTTPProtocolParams]'s query parameters
// as `url.Values`.
func (r RadarHTTPSummaryGetByHTTPProtocolParams) URLQuery() (v url.Values) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type RadarHTTPSummaryGetByHTTPProtocolParamsBotClass string

const (
	RadarHTTPSummaryGetByHTTPProtocolParamsBotClassLikelyAutomated RadarHTTPSummaryGetByHTTPProtocolParamsBotClass = "LIKELY_AUTOMATED"
	RadarHTTPSummaryGetByHTTPProtocolParamsBotClassLikelyHuman     RadarHTTPSummaryGetByHTTPProtocolParamsBotClass = "LIKELY_HUMAN"
)

func (r RadarHTTPSummaryGetByHTTPProtocolParamsBotClass) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByHTTPProtocolParamsBotClassLikelyAutomated, RadarHTTPSummaryGetByHTTPProtocolParamsBotClassLikelyHuman:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByHTTPProtocolParamsBrowserFamily string

const (
	RadarHTTPSummaryGetByHTTPProtocolParamsBrowserFamilyChrome  RadarHTTPSummaryGetByHTTPProtocolParamsBrowserFamily = "CHROME"
	RadarHTTPSummaryGetByHTTPProtocolParamsBrowserFamilyEdge    RadarHTTPSummaryGetByHTTPProtocolParamsBrowserFamily = "EDGE"
	RadarHTTPSummaryGetByHTTPProtocolParamsBrowserFamilyFirefox RadarHTTPSummaryGetByHTTPProtocolParamsBrowserFamily = "FIREFOX"
	RadarHTTPSummaryGetByHTTPProtocolParamsBrowserFamilySafari  RadarHTTPSummaryGetByHTTPProtocolParamsBrowserFamily = "SAFARI"
)

func (r RadarHTTPSummaryGetByHTTPProtocolParamsBrowserFamily) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByHTTPProtocolParamsBrowserFamilyChrome, RadarHTTPSummaryGetByHTTPProtocolParamsBrowserFamilyEdge, RadarHTTPSummaryGetByHTTPProtocolParamsBrowserFamilyFirefox, RadarHTTPSummaryGetByHTTPProtocolParamsBrowserFamilySafari:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByHTTPProtocolParamsDeviceType string

const (
	RadarHTTPSummaryGetByHTTPProtocolParamsDeviceTypeDesktop RadarHTTPSummaryGetByHTTPProtocolParamsDeviceType = "DESKTOP"
	RadarHTTPSummaryGetByHTTPProtocolParamsDeviceTypeMobile  RadarHTTPSummaryGetByHTTPProtocolParamsDeviceType = "MOBILE"
	RadarHTTPSummaryGetByHTTPProtocolParamsDeviceTypeOther   RadarHTTPSummaryGetByHTTPProtocolParamsDeviceType = "OTHER"
)

func (r RadarHTTPSummaryGetByHTTPProtocolParamsDeviceType) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByHTTPProtocolParamsDeviceTypeDesktop, RadarHTTPSummaryGetByHTTPProtocolParamsDeviceTypeMobile, RadarHTTPSummaryGetByHTTPProtocolParamsDeviceTypeOther:
		return true
	}
	return false
}

// Format in which results will be returned.
type RadarHTTPSummaryGetByHTTPProtocolParamsFormat string

const (
	RadarHTTPSummaryGetByHTTPProtocolParamsFormatJson RadarHTTPSummaryGetByHTTPProtocolParamsFormat = "JSON"
	RadarHTTPSummaryGetByHTTPProtocolParamsFormatCsv  RadarHTTPSummaryGetByHTTPProtocolParamsFormat = "CSV"
)

func (r RadarHTTPSummaryGetByHTTPProtocolParamsFormat) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByHTTPProtocolParamsFormatJson, RadarHTTPSummaryGetByHTTPProtocolParamsFormatCsv:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByHTTPProtocolParamsHTTPVersion string

const (
	RadarHTTPSummaryGetByHTTPProtocolParamsHTTPVersionHttPv1 RadarHTTPSummaryGetByHTTPProtocolParamsHTTPVersion = "HTTPv1"
	RadarHTTPSummaryGetByHTTPProtocolParamsHTTPVersionHttPv2 RadarHTTPSummaryGetByHTTPProtocolParamsHTTPVersion = "HTTPv2"
	RadarHTTPSummaryGetByHTTPProtocolParamsHTTPVersionHttPv3 RadarHTTPSummaryGetByHTTPProtocolParamsHTTPVersion = "HTTPv3"
)

func (r RadarHTTPSummaryGetByHTTPProtocolParamsHTTPVersion) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByHTTPProtocolParamsHTTPVersionHttPv1, RadarHTTPSummaryGetByHTTPProtocolParamsHTTPVersionHttPv2, RadarHTTPSummaryGetByHTTPProtocolParamsHTTPVersionHttPv3:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByHTTPProtocolParamsIPVersion string

const (
	RadarHTTPSummaryGetByHTTPProtocolParamsIPVersionIPv4 RadarHTTPSummaryGetByHTTPProtocolParamsIPVersion = "IPv4"
	RadarHTTPSummaryGetByHTTPProtocolParamsIPVersionIPv6 RadarHTTPSummaryGetByHTTPProtocolParamsIPVersion = "IPv6"
)

func (r RadarHTTPSummaryGetByHTTPProtocolParamsIPVersion) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByHTTPProtocolParamsIPVersionIPv4, RadarHTTPSummaryGetByHTTPProtocolParamsIPVersionIPv6:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByHTTPProtocolParamsO string

const (
	RadarHTTPSummaryGetByHTTPProtocolParamsOWindows  RadarHTTPSummaryGetByHTTPProtocolParamsO = "WINDOWS"
	RadarHTTPSummaryGetByHTTPProtocolParamsOMacosx   RadarHTTPSummaryGetByHTTPProtocolParamsO = "MACOSX"
	RadarHTTPSummaryGetByHTTPProtocolParamsOIos      RadarHTTPSummaryGetByHTTPProtocolParamsO = "IOS"
	RadarHTTPSummaryGetByHTTPProtocolParamsOAndroid  RadarHTTPSummaryGetByHTTPProtocolParamsO = "ANDROID"
	RadarHTTPSummaryGetByHTTPProtocolParamsOChromeos RadarHTTPSummaryGetByHTTPProtocolParamsO = "CHROMEOS"
	RadarHTTPSummaryGetByHTTPProtocolParamsOLinux    RadarHTTPSummaryGetByHTTPProtocolParamsO = "LINUX"
	RadarHTTPSummaryGetByHTTPProtocolParamsOSmartTv  RadarHTTPSummaryGetByHTTPProtocolParamsO = "SMART_TV"
)

func (r RadarHTTPSummaryGetByHTTPProtocolParamsO) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByHTTPProtocolParamsOWindows, RadarHTTPSummaryGetByHTTPProtocolParamsOMacosx, RadarHTTPSummaryGetByHTTPProtocolParamsOIos, RadarHTTPSummaryGetByHTTPProtocolParamsOAndroid, RadarHTTPSummaryGetByHTTPProtocolParamsOChromeos, RadarHTTPSummaryGetByHTTPProtocolParamsOLinux, RadarHTTPSummaryGetByHTTPProtocolParamsOSmartTv:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByHTTPProtocolParamsTlsVersion string

const (
	RadarHTTPSummaryGetByHTTPProtocolParamsTlsVersionTlSv1_0  RadarHTTPSummaryGetByHTTPProtocolParamsTlsVersion = "TLSv1_0"
	RadarHTTPSummaryGetByHTTPProtocolParamsTlsVersionTlSv1_1  RadarHTTPSummaryGetByHTTPProtocolParamsTlsVersion = "TLSv1_1"
	RadarHTTPSummaryGetByHTTPProtocolParamsTlsVersionTlSv1_2  RadarHTTPSummaryGetByHTTPProtocolParamsTlsVersion = "TLSv1_2"
	RadarHTTPSummaryGetByHTTPProtocolParamsTlsVersionTlSv1_3  RadarHTTPSummaryGetByHTTPProtocolParamsTlsVersion = "TLSv1_3"
	RadarHTTPSummaryGetByHTTPProtocolParamsTlsVersionTlSvQuic RadarHTTPSummaryGetByHTTPProtocolParamsTlsVersion = "TLSvQUIC"
)

func (r RadarHTTPSummaryGetByHTTPProtocolParamsTlsVersion) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByHTTPProtocolParamsTlsVersionTlSv1_0, RadarHTTPSummaryGetByHTTPProtocolParamsTlsVersionTlSv1_1, RadarHTTPSummaryGetByHTTPProtocolParamsTlsVersionTlSv1_2, RadarHTTPSummaryGetByHTTPProtocolParamsTlsVersionTlSv1_3, RadarHTTPSummaryGetByHTTPProtocolParamsTlsVersionTlSvQuic:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByHTTPVersionParams struct {
	// Filters results by Autonomous System. Specify one or more Autonomous System
	// Numbers (ASNs) as a comma-separated list. Prefix with `-` to exclude ASNs from
	// results. For example, `-174, 3356` excludes results from AS174, but includes
	// results from AS3356.
	Asn param.Field[[]string] `query:"asn"`
	// Filters results by bot class. Refer to
	// [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/).
	BotClass param.Field[[]RadarHTTPSummaryGetByHTTPVersionParamsBotClass] `query:"botClass"`
	// Filters results by browser family.
	BrowserFamily param.Field[[]RadarHTTPSummaryGetByHTTPVersionParamsBrowserFamily] `query:"browserFamily"`
	// Filters results by continent. Specify a comma-separated list of alpha-2 codes.
	// Prefix with `-` to exclude continents from results. For example, `-EU,NA`
	// excludes results from EU, but includes results from NA.
	Continent param.Field[[]string] `query:"continent"`
	// End of the date range (inclusive).
	DateEnd param.Field[[]time.Time] `query:"dateEnd" format:"date-time"`
	// Filters results by date range. For example, use `7d` and `7dcontrol` to compare
	// this week with the previous week. Use this parameter or set specific start and
	// end dates (`dateStart` and `dateEnd` parameters).
	DateRange param.Field[[]string] `query:"dateRange"`
	// Start of the date range.
	DateStart param.Field[[]time.Time] `query:"dateStart" format:"date-time"`
	// Filters results by device type.
	DeviceType param.Field[[]RadarHTTPSummaryGetByHTTPVersionParamsDeviceType] `query:"deviceType"`
	// Format in which results will be returned.
	Format param.Field[RadarHTTPSummaryGetByHTTPVersionParamsFormat] `query:"format"`
	// Filters results by HTTP protocol (HTTP vs. HTTPS).
	HTTPProtocol param.Field[[]RadarHTTPSummaryGetByHTTPVersionParamsHTTPProtocol] `query:"httpProtocol"`
	// Filters results by IP version (Ipv4 vs. IPv6).
	IPVersion param.Field[[]RadarHTTPSummaryGetByHTTPVersionParamsIPVersion] `query:"ipVersion"`
	// Filters results by location. Specify a comma-separated list of alpha-2 codes.
	// Prefix with `-` to exclude locations from results. For example, `-US,PT`
	// excludes results from the US, but includes results from PT.
	Location param.Field[[]string] `query:"location"`
	// Array of names used to label the series in the response.
	Name param.Field[[]string] `query:"name"`
	// Filters results by operating system.
	Os param.Field[[]RadarHTTPSummaryGetByHTTPVersionParamsO] `query:"os"`
	// Filters results by TLS version.
	TlsVersion param.Field[[]RadarHTTPSummaryGetByHTTPVersionParamsTlsVersion] `query:"tlsVersion"`
}

// URLQuery serializes [RadarHTTPSummaryGetByHTTPVersionParams]'s query parameters
// as `url.Values`.
func (r RadarHTTPSummaryGetByHTTPVersionParams) URLQuery() (v url.Values) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type RadarHTTPSummaryGetByHTTPVersionParamsBotClass string

const (
	RadarHTTPSummaryGetByHTTPVersionParamsBotClassLikelyAutomated RadarHTTPSummaryGetByHTTPVersionParamsBotClass = "LIKELY_AUTOMATED"
	RadarHTTPSummaryGetByHTTPVersionParamsBotClassLikelyHuman     RadarHTTPSummaryGetByHTTPVersionParamsBotClass = "LIKELY_HUMAN"
)

func (r RadarHTTPSummaryGetByHTTPVersionParamsBotClass) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByHTTPVersionParamsBotClassLikelyAutomated, RadarHTTPSummaryGetByHTTPVersionParamsBotClassLikelyHuman:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByHTTPVersionParamsBrowserFamily string

const (
	RadarHTTPSummaryGetByHTTPVersionParamsBrowserFamilyChrome  RadarHTTPSummaryGetByHTTPVersionParamsBrowserFamily = "CHROME"
	RadarHTTPSummaryGetByHTTPVersionParamsBrowserFamilyEdge    RadarHTTPSummaryGetByHTTPVersionParamsBrowserFamily = "EDGE"
	RadarHTTPSummaryGetByHTTPVersionParamsBrowserFamilyFirefox RadarHTTPSummaryGetByHTTPVersionParamsBrowserFamily = "FIREFOX"
	RadarHTTPSummaryGetByHTTPVersionParamsBrowserFamilySafari  RadarHTTPSummaryGetByHTTPVersionParamsBrowserFamily = "SAFARI"
)

func (r RadarHTTPSummaryGetByHTTPVersionParamsBrowserFamily) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByHTTPVersionParamsBrowserFamilyChrome, RadarHTTPSummaryGetByHTTPVersionParamsBrowserFamilyEdge, RadarHTTPSummaryGetByHTTPVersionParamsBrowserFamilyFirefox, RadarHTTPSummaryGetByHTTPVersionParamsBrowserFamilySafari:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByHTTPVersionParamsDeviceType string

const (
	RadarHTTPSummaryGetByHTTPVersionParamsDeviceTypeDesktop RadarHTTPSummaryGetByHTTPVersionParamsDeviceType = "DESKTOP"
	RadarHTTPSummaryGetByHTTPVersionParamsDeviceTypeMobile  RadarHTTPSummaryGetByHTTPVersionParamsDeviceType = "MOBILE"
	RadarHTTPSummaryGetByHTTPVersionParamsDeviceTypeOther   RadarHTTPSummaryGetByHTTPVersionParamsDeviceType = "OTHER"
)

func (r RadarHTTPSummaryGetByHTTPVersionParamsDeviceType) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByHTTPVersionParamsDeviceTypeDesktop, RadarHTTPSummaryGetByHTTPVersionParamsDeviceTypeMobile, RadarHTTPSummaryGetByHTTPVersionParamsDeviceTypeOther:
		return true
	}
	return false
}

// Format in which results will be returned.
type RadarHTTPSummaryGetByHTTPVersionParamsFormat string

const (
	RadarHTTPSummaryGetByHTTPVersionParamsFormatJson RadarHTTPSummaryGetByHTTPVersionParamsFormat = "JSON"
	RadarHTTPSummaryGetByHTTPVersionParamsFormatCsv  RadarHTTPSummaryGetByHTTPVersionParamsFormat = "CSV"
)

func (r RadarHTTPSummaryGetByHTTPVersionParamsFormat) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByHTTPVersionParamsFormatJson, RadarHTTPSummaryGetByHTTPVersionParamsFormatCsv:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByHTTPVersionParamsHTTPProtocol string

const (
	RadarHTTPSummaryGetByHTTPVersionParamsHTTPProtocolHTTP  RadarHTTPSummaryGetByHTTPVersionParamsHTTPProtocol = "HTTP"
	RadarHTTPSummaryGetByHTTPVersionParamsHTTPProtocolHTTPS RadarHTTPSummaryGetByHTTPVersionParamsHTTPProtocol = "HTTPS"
)

func (r RadarHTTPSummaryGetByHTTPVersionParamsHTTPProtocol) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByHTTPVersionParamsHTTPProtocolHTTP, RadarHTTPSummaryGetByHTTPVersionParamsHTTPProtocolHTTPS:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByHTTPVersionParamsIPVersion string

const (
	RadarHTTPSummaryGetByHTTPVersionParamsIPVersionIPv4 RadarHTTPSummaryGetByHTTPVersionParamsIPVersion = "IPv4"
	RadarHTTPSummaryGetByHTTPVersionParamsIPVersionIPv6 RadarHTTPSummaryGetByHTTPVersionParamsIPVersion = "IPv6"
)

func (r RadarHTTPSummaryGetByHTTPVersionParamsIPVersion) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByHTTPVersionParamsIPVersionIPv4, RadarHTTPSummaryGetByHTTPVersionParamsIPVersionIPv6:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByHTTPVersionParamsO string

const (
	RadarHTTPSummaryGetByHTTPVersionParamsOWindows  RadarHTTPSummaryGetByHTTPVersionParamsO = "WINDOWS"
	RadarHTTPSummaryGetByHTTPVersionParamsOMacosx   RadarHTTPSummaryGetByHTTPVersionParamsO = "MACOSX"
	RadarHTTPSummaryGetByHTTPVersionParamsOIos      RadarHTTPSummaryGetByHTTPVersionParamsO = "IOS"
	RadarHTTPSummaryGetByHTTPVersionParamsOAndroid  RadarHTTPSummaryGetByHTTPVersionParamsO = "ANDROID"
	RadarHTTPSummaryGetByHTTPVersionParamsOChromeos RadarHTTPSummaryGetByHTTPVersionParamsO = "CHROMEOS"
	RadarHTTPSummaryGetByHTTPVersionParamsOLinux    RadarHTTPSummaryGetByHTTPVersionParamsO = "LINUX"
	RadarHTTPSummaryGetByHTTPVersionParamsOSmartTv  RadarHTTPSummaryGetByHTTPVersionParamsO = "SMART_TV"
)

func (r RadarHTTPSummaryGetByHTTPVersionParamsO) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByHTTPVersionParamsOWindows, RadarHTTPSummaryGetByHTTPVersionParamsOMacosx, RadarHTTPSummaryGetByHTTPVersionParamsOIos, RadarHTTPSummaryGetByHTTPVersionParamsOAndroid, RadarHTTPSummaryGetByHTTPVersionParamsOChromeos, RadarHTTPSummaryGetByHTTPVersionParamsOLinux, RadarHTTPSummaryGetByHTTPVersionParamsOSmartTv:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByHTTPVersionParamsTlsVersion string

const (
	RadarHTTPSummaryGetByHTTPVersionParamsTlsVersionTlSv1_0  RadarHTTPSummaryGetByHTTPVersionParamsTlsVersion = "TLSv1_0"
	RadarHTTPSummaryGetByHTTPVersionParamsTlsVersionTlSv1_1  RadarHTTPSummaryGetByHTTPVersionParamsTlsVersion = "TLSv1_1"
	RadarHTTPSummaryGetByHTTPVersionParamsTlsVersionTlSv1_2  RadarHTTPSummaryGetByHTTPVersionParamsTlsVersion = "TLSv1_2"
	RadarHTTPSummaryGetByHTTPVersionParamsTlsVersionTlSv1_3  RadarHTTPSummaryGetByHTTPVersionParamsTlsVersion = "TLSv1_3"
	RadarHTTPSummaryGetByHTTPVersionParamsTlsVersionTlSvQuic RadarHTTPSummaryGetByHTTPVersionParamsTlsVersion = "TLSvQUIC"
)

func (r RadarHTTPSummaryGetByHTTPVersionParamsTlsVersion) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByHTTPVersionParamsTlsVersionTlSv1_0, RadarHTTPSummaryGetByHTTPVersionParamsTlsVersionTlSv1_1, RadarHTTPSummaryGetByHTTPVersionParamsTlsVersionTlSv1_2, RadarHTTPSummaryGetByHTTPVersionParamsTlsVersionTlSv1_3, RadarHTTPSummaryGetByHTTPVersionParamsTlsVersionTlSvQuic:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByIPVersionParams struct {
	// Filters results by Autonomous System. Specify one or more Autonomous System
	// Numbers (ASNs) as a comma-separated list. Prefix with `-` to exclude ASNs from
	// results. For example, `-174, 3356` excludes results from AS174, but includes
	// results from AS3356.
	Asn param.Field[[]string] `query:"asn"`
	// Filters results by bot class. Refer to
	// [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/).
	BotClass param.Field[[]RadarHTTPSummaryGetByIPVersionParamsBotClass] `query:"botClass"`
	// Filters results by browser family.
	BrowserFamily param.Field[[]RadarHTTPSummaryGetByIPVersionParamsBrowserFamily] `query:"browserFamily"`
	// Filters results by continent. Specify a comma-separated list of alpha-2 codes.
	// Prefix with `-` to exclude continents from results. For example, `-EU,NA`
	// excludes results from EU, but includes results from NA.
	Continent param.Field[[]string] `query:"continent"`
	// End of the date range (inclusive).
	DateEnd param.Field[[]time.Time] `query:"dateEnd" format:"date-time"`
	// Filters results by date range. For example, use `7d` and `7dcontrol` to compare
	// this week with the previous week. Use this parameter or set specific start and
	// end dates (`dateStart` and `dateEnd` parameters).
	DateRange param.Field[[]string] `query:"dateRange"`
	// Start of the date range.
	DateStart param.Field[[]time.Time] `query:"dateStart" format:"date-time"`
	// Filters results by device type.
	DeviceType param.Field[[]RadarHTTPSummaryGetByIPVersionParamsDeviceType] `query:"deviceType"`
	// Format in which results will be returned.
	Format param.Field[RadarHTTPSummaryGetByIPVersionParamsFormat] `query:"format"`
	// Filters results by HTTP protocol (HTTP vs. HTTPS).
	HTTPProtocol param.Field[[]RadarHTTPSummaryGetByIPVersionParamsHTTPProtocol] `query:"httpProtocol"`
	// Filters results by HTTP version.
	HTTPVersion param.Field[[]RadarHTTPSummaryGetByIPVersionParamsHTTPVersion] `query:"httpVersion"`
	// Filters results by location. Specify a comma-separated list of alpha-2 codes.
	// Prefix with `-` to exclude locations from results. For example, `-US,PT`
	// excludes results from the US, but includes results from PT.
	Location param.Field[[]string] `query:"location"`
	// Array of names used to label the series in the response.
	Name param.Field[[]string] `query:"name"`
	// Filters results by operating system.
	Os param.Field[[]RadarHTTPSummaryGetByIPVersionParamsO] `query:"os"`
	// Filters results by TLS version.
	TlsVersion param.Field[[]RadarHTTPSummaryGetByIPVersionParamsTlsVersion] `query:"tlsVersion"`
}

// URLQuery serializes [RadarHTTPSummaryGetByIPVersionParams]'s query parameters as
// `url.Values`.
func (r RadarHTTPSummaryGetByIPVersionParams) URLQuery() (v url.Values) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type RadarHTTPSummaryGetByIPVersionParamsBotClass string

const (
	RadarHTTPSummaryGetByIPVersionParamsBotClassLikelyAutomated RadarHTTPSummaryGetByIPVersionParamsBotClass = "LIKELY_AUTOMATED"
	RadarHTTPSummaryGetByIPVersionParamsBotClassLikelyHuman     RadarHTTPSummaryGetByIPVersionParamsBotClass = "LIKELY_HUMAN"
)

func (r RadarHTTPSummaryGetByIPVersionParamsBotClass) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByIPVersionParamsBotClassLikelyAutomated, RadarHTTPSummaryGetByIPVersionParamsBotClassLikelyHuman:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByIPVersionParamsBrowserFamily string

const (
	RadarHTTPSummaryGetByIPVersionParamsBrowserFamilyChrome  RadarHTTPSummaryGetByIPVersionParamsBrowserFamily = "CHROME"
	RadarHTTPSummaryGetByIPVersionParamsBrowserFamilyEdge    RadarHTTPSummaryGetByIPVersionParamsBrowserFamily = "EDGE"
	RadarHTTPSummaryGetByIPVersionParamsBrowserFamilyFirefox RadarHTTPSummaryGetByIPVersionParamsBrowserFamily = "FIREFOX"
	RadarHTTPSummaryGetByIPVersionParamsBrowserFamilySafari  RadarHTTPSummaryGetByIPVersionParamsBrowserFamily = "SAFARI"
)

func (r RadarHTTPSummaryGetByIPVersionParamsBrowserFamily) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByIPVersionParamsBrowserFamilyChrome, RadarHTTPSummaryGetByIPVersionParamsBrowserFamilyEdge, RadarHTTPSummaryGetByIPVersionParamsBrowserFamilyFirefox, RadarHTTPSummaryGetByIPVersionParamsBrowserFamilySafari:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByIPVersionParamsDeviceType string

const (
	RadarHTTPSummaryGetByIPVersionParamsDeviceTypeDesktop RadarHTTPSummaryGetByIPVersionParamsDeviceType = "DESKTOP"
	RadarHTTPSummaryGetByIPVersionParamsDeviceTypeMobile  RadarHTTPSummaryGetByIPVersionParamsDeviceType = "MOBILE"
	RadarHTTPSummaryGetByIPVersionParamsDeviceTypeOther   RadarHTTPSummaryGetByIPVersionParamsDeviceType = "OTHER"
)

func (r RadarHTTPSummaryGetByIPVersionParamsDeviceType) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByIPVersionParamsDeviceTypeDesktop, RadarHTTPSummaryGetByIPVersionParamsDeviceTypeMobile, RadarHTTPSummaryGetByIPVersionParamsDeviceTypeOther:
		return true
	}
	return false
}

// Format in which results will be returned.
type RadarHTTPSummaryGetByIPVersionParamsFormat string

const (
	RadarHTTPSummaryGetByIPVersionParamsFormatJson RadarHTTPSummaryGetByIPVersionParamsFormat = "JSON"
	RadarHTTPSummaryGetByIPVersionParamsFormatCsv  RadarHTTPSummaryGetByIPVersionParamsFormat = "CSV"
)

func (r RadarHTTPSummaryGetByIPVersionParamsFormat) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByIPVersionParamsFormatJson, RadarHTTPSummaryGetByIPVersionParamsFormatCsv:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByIPVersionParamsHTTPProtocol string

const (
	RadarHTTPSummaryGetByIPVersionParamsHTTPProtocolHTTP  RadarHTTPSummaryGetByIPVersionParamsHTTPProtocol = "HTTP"
	RadarHTTPSummaryGetByIPVersionParamsHTTPProtocolHTTPS RadarHTTPSummaryGetByIPVersionParamsHTTPProtocol = "HTTPS"
)

func (r RadarHTTPSummaryGetByIPVersionParamsHTTPProtocol) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByIPVersionParamsHTTPProtocolHTTP, RadarHTTPSummaryGetByIPVersionParamsHTTPProtocolHTTPS:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByIPVersionParamsHTTPVersion string

const (
	RadarHTTPSummaryGetByIPVersionParamsHTTPVersionHttPv1 RadarHTTPSummaryGetByIPVersionParamsHTTPVersion = "HTTPv1"
	RadarHTTPSummaryGetByIPVersionParamsHTTPVersionHttPv2 RadarHTTPSummaryGetByIPVersionParamsHTTPVersion = "HTTPv2"
	RadarHTTPSummaryGetByIPVersionParamsHTTPVersionHttPv3 RadarHTTPSummaryGetByIPVersionParamsHTTPVersion = "HTTPv3"
)

func (r RadarHTTPSummaryGetByIPVersionParamsHTTPVersion) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByIPVersionParamsHTTPVersionHttPv1, RadarHTTPSummaryGetByIPVersionParamsHTTPVersionHttPv2, RadarHTTPSummaryGetByIPVersionParamsHTTPVersionHttPv3:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByIPVersionParamsO string

const (
	RadarHTTPSummaryGetByIPVersionParamsOWindows  RadarHTTPSummaryGetByIPVersionParamsO = "WINDOWS"
	RadarHTTPSummaryGetByIPVersionParamsOMacosx   RadarHTTPSummaryGetByIPVersionParamsO = "MACOSX"
	RadarHTTPSummaryGetByIPVersionParamsOIos      RadarHTTPSummaryGetByIPVersionParamsO = "IOS"
	RadarHTTPSummaryGetByIPVersionParamsOAndroid  RadarHTTPSummaryGetByIPVersionParamsO = "ANDROID"
	RadarHTTPSummaryGetByIPVersionParamsOChromeos RadarHTTPSummaryGetByIPVersionParamsO = "CHROMEOS"
	RadarHTTPSummaryGetByIPVersionParamsOLinux    RadarHTTPSummaryGetByIPVersionParamsO = "LINUX"
	RadarHTTPSummaryGetByIPVersionParamsOSmartTv  RadarHTTPSummaryGetByIPVersionParamsO = "SMART_TV"
)

func (r RadarHTTPSummaryGetByIPVersionParamsO) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByIPVersionParamsOWindows, RadarHTTPSummaryGetByIPVersionParamsOMacosx, RadarHTTPSummaryGetByIPVersionParamsOIos, RadarHTTPSummaryGetByIPVersionParamsOAndroid, RadarHTTPSummaryGetByIPVersionParamsOChromeos, RadarHTTPSummaryGetByIPVersionParamsOLinux, RadarHTTPSummaryGetByIPVersionParamsOSmartTv:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByIPVersionParamsTlsVersion string

const (
	RadarHTTPSummaryGetByIPVersionParamsTlsVersionTlSv1_0  RadarHTTPSummaryGetByIPVersionParamsTlsVersion = "TLSv1_0"
	RadarHTTPSummaryGetByIPVersionParamsTlsVersionTlSv1_1  RadarHTTPSummaryGetByIPVersionParamsTlsVersion = "TLSv1_1"
	RadarHTTPSummaryGetByIPVersionParamsTlsVersionTlSv1_2  RadarHTTPSummaryGetByIPVersionParamsTlsVersion = "TLSv1_2"
	RadarHTTPSummaryGetByIPVersionParamsTlsVersionTlSv1_3  RadarHTTPSummaryGetByIPVersionParamsTlsVersion = "TLSv1_3"
	RadarHTTPSummaryGetByIPVersionParamsTlsVersionTlSvQuic RadarHTTPSummaryGetByIPVersionParamsTlsVersion = "TLSvQUIC"
)

func (r RadarHTTPSummaryGetByIPVersionParamsTlsVersion) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByIPVersionParamsTlsVersionTlSv1_0, RadarHTTPSummaryGetByIPVersionParamsTlsVersionTlSv1_1, RadarHTTPSummaryGetByIPVersionParamsTlsVersionTlSv1_2, RadarHTTPSummaryGetByIPVersionParamsTlsVersionTlSv1_3, RadarHTTPSummaryGetByIPVersionParamsTlsVersionTlSvQuic:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByOsParams struct {
	// Filters results by Autonomous System. Specify one or more Autonomous System
	// Numbers (ASNs) as a comma-separated list. Prefix with `-` to exclude ASNs from
	// results. For example, `-174, 3356` excludes results from AS174, but includes
	// results from AS3356.
	Asn param.Field[[]string] `query:"asn"`
	// Filters results by bot class. Refer to
	// [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/).
	BotClass param.Field[[]RadarHTTPSummaryGetByOsParamsBotClass] `query:"botClass"`
	// Filters results by browser family.
	BrowserFamily param.Field[[]RadarHTTPSummaryGetByOsParamsBrowserFamily] `query:"browserFamily"`
	// Filters results by continent. Specify a comma-separated list of alpha-2 codes.
	// Prefix with `-` to exclude continents from results. For example, `-EU,NA`
	// excludes results from EU, but includes results from NA.
	Continent param.Field[[]string] `query:"continent"`
	// End of the date range (inclusive).
	DateEnd param.Field[[]time.Time] `query:"dateEnd" format:"date-time"`
	// Filters results by date range. For example, use `7d` and `7dcontrol` to compare
	// this week with the previous week. Use this parameter or set specific start and
	// end dates (`dateStart` and `dateEnd` parameters).
	DateRange param.Field[[]string] `query:"dateRange"`
	// Start of the date range.
	DateStart param.Field[[]time.Time] `query:"dateStart" format:"date-time"`
	// Filters results by device type.
	DeviceType param.Field[[]RadarHTTPSummaryGetByOsParamsDeviceType] `query:"deviceType"`
	// Format in which results will be returned.
	Format param.Field[RadarHTTPSummaryGetByOsParamsFormat] `query:"format"`
	// Filters results by HTTP protocol (HTTP vs. HTTPS).
	HTTPProtocol param.Field[[]RadarHTTPSummaryGetByOsParamsHTTPProtocol] `query:"httpProtocol"`
	// Filters results by HTTP version.
	HTTPVersion param.Field[[]RadarHTTPSummaryGetByOsParamsHTTPVersion] `query:"httpVersion"`
	// Filters results by IP version (Ipv4 vs. IPv6).
	IPVersion param.Field[[]RadarHTTPSummaryGetByOsParamsIPVersion] `query:"ipVersion"`
	// Filters results by location. Specify a comma-separated list of alpha-2 codes.
	// Prefix with `-` to exclude locations from results. For example, `-US,PT`
	// excludes results from the US, but includes results from PT.
	Location param.Field[[]string] `query:"location"`
	// Array of names used to label the series in the response.
	Name param.Field[[]string] `query:"name"`
	// Filters results by TLS version.
	TlsVersion param.Field[[]RadarHTTPSummaryGetByOsParamsTlsVersion] `query:"tlsVersion"`
}

// URLQuery serializes [RadarHTTPSummaryGetByOsParams]'s query parameters as
// `url.Values`.
func (r RadarHTTPSummaryGetByOsParams) URLQuery() (v url.Values) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type RadarHTTPSummaryGetByOsParamsBotClass string

const (
	RadarHTTPSummaryGetByOsParamsBotClassLikelyAutomated RadarHTTPSummaryGetByOsParamsBotClass = "LIKELY_AUTOMATED"
	RadarHTTPSummaryGetByOsParamsBotClassLikelyHuman     RadarHTTPSummaryGetByOsParamsBotClass = "LIKELY_HUMAN"
)

func (r RadarHTTPSummaryGetByOsParamsBotClass) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByOsParamsBotClassLikelyAutomated, RadarHTTPSummaryGetByOsParamsBotClassLikelyHuman:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByOsParamsBrowserFamily string

const (
	RadarHTTPSummaryGetByOsParamsBrowserFamilyChrome  RadarHTTPSummaryGetByOsParamsBrowserFamily = "CHROME"
	RadarHTTPSummaryGetByOsParamsBrowserFamilyEdge    RadarHTTPSummaryGetByOsParamsBrowserFamily = "EDGE"
	RadarHTTPSummaryGetByOsParamsBrowserFamilyFirefox RadarHTTPSummaryGetByOsParamsBrowserFamily = "FIREFOX"
	RadarHTTPSummaryGetByOsParamsBrowserFamilySafari  RadarHTTPSummaryGetByOsParamsBrowserFamily = "SAFARI"
)

func (r RadarHTTPSummaryGetByOsParamsBrowserFamily) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByOsParamsBrowserFamilyChrome, RadarHTTPSummaryGetByOsParamsBrowserFamilyEdge, RadarHTTPSummaryGetByOsParamsBrowserFamilyFirefox, RadarHTTPSummaryGetByOsParamsBrowserFamilySafari:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByOsParamsDeviceType string

const (
	RadarHTTPSummaryGetByOsParamsDeviceTypeDesktop RadarHTTPSummaryGetByOsParamsDeviceType = "DESKTOP"
	RadarHTTPSummaryGetByOsParamsDeviceTypeMobile  RadarHTTPSummaryGetByOsParamsDeviceType = "MOBILE"
	RadarHTTPSummaryGetByOsParamsDeviceTypeOther   RadarHTTPSummaryGetByOsParamsDeviceType = "OTHER"
)

func (r RadarHTTPSummaryGetByOsParamsDeviceType) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByOsParamsDeviceTypeDesktop, RadarHTTPSummaryGetByOsParamsDeviceTypeMobile, RadarHTTPSummaryGetByOsParamsDeviceTypeOther:
		return true
	}
	return false
}

// Format in which results will be returned.
type RadarHTTPSummaryGetByOsParamsFormat string

const (
	RadarHTTPSummaryGetByOsParamsFormatJson RadarHTTPSummaryGetByOsParamsFormat = "JSON"
	RadarHTTPSummaryGetByOsParamsFormatCsv  RadarHTTPSummaryGetByOsParamsFormat = "CSV"
)

func (r RadarHTTPSummaryGetByOsParamsFormat) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByOsParamsFormatJson, RadarHTTPSummaryGetByOsParamsFormatCsv:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByOsParamsHTTPProtocol string

const (
	RadarHTTPSummaryGetByOsParamsHTTPProtocolHTTP  RadarHTTPSummaryGetByOsParamsHTTPProtocol = "HTTP"
	RadarHTTPSummaryGetByOsParamsHTTPProtocolHTTPS RadarHTTPSummaryGetByOsParamsHTTPProtocol = "HTTPS"
)

func (r RadarHTTPSummaryGetByOsParamsHTTPProtocol) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByOsParamsHTTPProtocolHTTP, RadarHTTPSummaryGetByOsParamsHTTPProtocolHTTPS:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByOsParamsHTTPVersion string

const (
	RadarHTTPSummaryGetByOsParamsHTTPVersionHttPv1 RadarHTTPSummaryGetByOsParamsHTTPVersion = "HTTPv1"
	RadarHTTPSummaryGetByOsParamsHTTPVersionHttPv2 RadarHTTPSummaryGetByOsParamsHTTPVersion = "HTTPv2"
	RadarHTTPSummaryGetByOsParamsHTTPVersionHttPv3 RadarHTTPSummaryGetByOsParamsHTTPVersion = "HTTPv3"
)

func (r RadarHTTPSummaryGetByOsParamsHTTPVersion) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByOsParamsHTTPVersionHttPv1, RadarHTTPSummaryGetByOsParamsHTTPVersionHttPv2, RadarHTTPSummaryGetByOsParamsHTTPVersionHttPv3:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByOsParamsIPVersion string

const (
	RadarHTTPSummaryGetByOsParamsIPVersionIPv4 RadarHTTPSummaryGetByOsParamsIPVersion = "IPv4"
	RadarHTTPSummaryGetByOsParamsIPVersionIPv6 RadarHTTPSummaryGetByOsParamsIPVersion = "IPv6"
)

func (r RadarHTTPSummaryGetByOsParamsIPVersion) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByOsParamsIPVersionIPv4, RadarHTTPSummaryGetByOsParamsIPVersionIPv6:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByOsParamsTlsVersion string

const (
	RadarHTTPSummaryGetByOsParamsTlsVersionTlSv1_0  RadarHTTPSummaryGetByOsParamsTlsVersion = "TLSv1_0"
	RadarHTTPSummaryGetByOsParamsTlsVersionTlSv1_1  RadarHTTPSummaryGetByOsParamsTlsVersion = "TLSv1_1"
	RadarHTTPSummaryGetByOsParamsTlsVersionTlSv1_2  RadarHTTPSummaryGetByOsParamsTlsVersion = "TLSv1_2"
	RadarHTTPSummaryGetByOsParamsTlsVersionTlSv1_3  RadarHTTPSummaryGetByOsParamsTlsVersion = "TLSv1_3"
	RadarHTTPSummaryGetByOsParamsTlsVersionTlSvQuic RadarHTTPSummaryGetByOsParamsTlsVersion = "TLSvQUIC"
)

func (r RadarHTTPSummaryGetByOsParamsTlsVersion) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByOsParamsTlsVersionTlSv1_0, RadarHTTPSummaryGetByOsParamsTlsVersionTlSv1_1, RadarHTTPSummaryGetByOsParamsTlsVersionTlSv1_2, RadarHTTPSummaryGetByOsParamsTlsVersionTlSv1_3, RadarHTTPSummaryGetByOsParamsTlsVersionTlSvQuic:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByPostQuantumParams struct {
	// Filters results by Autonomous System. Specify one or more Autonomous System
	// Numbers (ASNs) as a comma-separated list. Prefix with `-` to exclude ASNs from
	// results. For example, `-174, 3356` excludes results from AS174, but includes
	// results from AS3356.
	Asn param.Field[[]string] `query:"asn"`
	// Filters results by bot class. Refer to
	// [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/).
	BotClass param.Field[[]RadarHTTPSummaryGetByPostQuantumParamsBotClass] `query:"botClass"`
	// Filters results by browser family.
	BrowserFamily param.Field[[]RadarHTTPSummaryGetByPostQuantumParamsBrowserFamily] `query:"browserFamily"`
	// Filters results by continent. Specify a comma-separated list of alpha-2 codes.
	// Prefix with `-` to exclude continents from results. For example, `-EU,NA`
	// excludes results from EU, but includes results from NA.
	Continent param.Field[[]string] `query:"continent"`
	// End of the date range (inclusive).
	DateEnd param.Field[[]time.Time] `query:"dateEnd" format:"date-time"`
	// Filters results by date range. For example, use `7d` and `7dcontrol` to compare
	// this week with the previous week. Use this parameter or set specific start and
	// end dates (`dateStart` and `dateEnd` parameters).
	DateRange param.Field[[]string] `query:"dateRange"`
	// Start of the date range.
	DateStart param.Field[[]time.Time] `query:"dateStart" format:"date-time"`
	// Filters results by device type.
	DeviceType param.Field[[]RadarHTTPSummaryGetByPostQuantumParamsDeviceType] `query:"deviceType"`
	// Format in which results will be returned.
	Format param.Field[RadarHTTPSummaryGetByPostQuantumParamsFormat] `query:"format"`
	// Filters results by HTTP protocol (HTTP vs. HTTPS).
	HTTPProtocol param.Field[[]RadarHTTPSummaryGetByPostQuantumParamsHTTPProtocol] `query:"httpProtocol"`
	// Filters results by HTTP version.
	HTTPVersion param.Field[[]RadarHTTPSummaryGetByPostQuantumParamsHTTPVersion] `query:"httpVersion"`
	// Filters results by IP version (Ipv4 vs. IPv6).
	IPVersion param.Field[[]RadarHTTPSummaryGetByPostQuantumParamsIPVersion] `query:"ipVersion"`
	// Filters results by location. Specify a comma-separated list of alpha-2 codes.
	// Prefix with `-` to exclude locations from results. For example, `-US,PT`
	// excludes results from the US, but includes results from PT.
	Location param.Field[[]string] `query:"location"`
	// Array of names used to label the series in the response.
	Name param.Field[[]string] `query:"name"`
	// Filters results by operating system.
	Os param.Field[[]RadarHTTPSummaryGetByPostQuantumParamsO] `query:"os"`
	// Filters results by TLS version.
	TlsVersion param.Field[[]RadarHTTPSummaryGetByPostQuantumParamsTlsVersion] `query:"tlsVersion"`
}

// URLQuery serializes [RadarHTTPSummaryGetByPostQuantumParams]'s query parameters
// as `url.Values`.
func (r RadarHTTPSummaryGetByPostQuantumParams) URLQuery() (v url.Values) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type RadarHTTPSummaryGetByPostQuantumParamsBotClass string

const (
	RadarHTTPSummaryGetByPostQuantumParamsBotClassLikelyAutomated RadarHTTPSummaryGetByPostQuantumParamsBotClass = "LIKELY_AUTOMATED"
	RadarHTTPSummaryGetByPostQuantumParamsBotClassLikelyHuman     RadarHTTPSummaryGetByPostQuantumParamsBotClass = "LIKELY_HUMAN"
)

func (r RadarHTTPSummaryGetByPostQuantumParamsBotClass) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByPostQuantumParamsBotClassLikelyAutomated, RadarHTTPSummaryGetByPostQuantumParamsBotClassLikelyHuman:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByPostQuantumParamsBrowserFamily string

const (
	RadarHTTPSummaryGetByPostQuantumParamsBrowserFamilyChrome  RadarHTTPSummaryGetByPostQuantumParamsBrowserFamily = "CHROME"
	RadarHTTPSummaryGetByPostQuantumParamsBrowserFamilyEdge    RadarHTTPSummaryGetByPostQuantumParamsBrowserFamily = "EDGE"
	RadarHTTPSummaryGetByPostQuantumParamsBrowserFamilyFirefox RadarHTTPSummaryGetByPostQuantumParamsBrowserFamily = "FIREFOX"
	RadarHTTPSummaryGetByPostQuantumParamsBrowserFamilySafari  RadarHTTPSummaryGetByPostQuantumParamsBrowserFamily = "SAFARI"
)

func (r RadarHTTPSummaryGetByPostQuantumParamsBrowserFamily) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByPostQuantumParamsBrowserFamilyChrome, RadarHTTPSummaryGetByPostQuantumParamsBrowserFamilyEdge, RadarHTTPSummaryGetByPostQuantumParamsBrowserFamilyFirefox, RadarHTTPSummaryGetByPostQuantumParamsBrowserFamilySafari:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByPostQuantumParamsDeviceType string

const (
	RadarHTTPSummaryGetByPostQuantumParamsDeviceTypeDesktop RadarHTTPSummaryGetByPostQuantumParamsDeviceType = "DESKTOP"
	RadarHTTPSummaryGetByPostQuantumParamsDeviceTypeMobile  RadarHTTPSummaryGetByPostQuantumParamsDeviceType = "MOBILE"
	RadarHTTPSummaryGetByPostQuantumParamsDeviceTypeOther   RadarHTTPSummaryGetByPostQuantumParamsDeviceType = "OTHER"
)

func (r RadarHTTPSummaryGetByPostQuantumParamsDeviceType) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByPostQuantumParamsDeviceTypeDesktop, RadarHTTPSummaryGetByPostQuantumParamsDeviceTypeMobile, RadarHTTPSummaryGetByPostQuantumParamsDeviceTypeOther:
		return true
	}
	return false
}

// Format in which results will be returned.
type RadarHTTPSummaryGetByPostQuantumParamsFormat string

const (
	RadarHTTPSummaryGetByPostQuantumParamsFormatJson RadarHTTPSummaryGetByPostQuantumParamsFormat = "JSON"
	RadarHTTPSummaryGetByPostQuantumParamsFormatCsv  RadarHTTPSummaryGetByPostQuantumParamsFormat = "CSV"
)

func (r RadarHTTPSummaryGetByPostQuantumParamsFormat) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByPostQuantumParamsFormatJson, RadarHTTPSummaryGetByPostQuantumParamsFormatCsv:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByPostQuantumParamsHTTPProtocol string

const (
	RadarHTTPSummaryGetByPostQuantumParamsHTTPProtocolHTTP  RadarHTTPSummaryGetByPostQuantumParamsHTTPProtocol = "HTTP"
	RadarHTTPSummaryGetByPostQuantumParamsHTTPProtocolHTTPS RadarHTTPSummaryGetByPostQuantumParamsHTTPProtocol = "HTTPS"
)

func (r RadarHTTPSummaryGetByPostQuantumParamsHTTPProtocol) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByPostQuantumParamsHTTPProtocolHTTP, RadarHTTPSummaryGetByPostQuantumParamsHTTPProtocolHTTPS:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByPostQuantumParamsHTTPVersion string

const (
	RadarHTTPSummaryGetByPostQuantumParamsHTTPVersionHttPv1 RadarHTTPSummaryGetByPostQuantumParamsHTTPVersion = "HTTPv1"
	RadarHTTPSummaryGetByPostQuantumParamsHTTPVersionHttPv2 RadarHTTPSummaryGetByPostQuantumParamsHTTPVersion = "HTTPv2"
	RadarHTTPSummaryGetByPostQuantumParamsHTTPVersionHttPv3 RadarHTTPSummaryGetByPostQuantumParamsHTTPVersion = "HTTPv3"
)

func (r RadarHTTPSummaryGetByPostQuantumParamsHTTPVersion) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByPostQuantumParamsHTTPVersionHttPv1, RadarHTTPSummaryGetByPostQuantumParamsHTTPVersionHttPv2, RadarHTTPSummaryGetByPostQuantumParamsHTTPVersionHttPv3:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByPostQuantumParamsIPVersion string

const (
	RadarHTTPSummaryGetByPostQuantumParamsIPVersionIPv4 RadarHTTPSummaryGetByPostQuantumParamsIPVersion = "IPv4"
	RadarHTTPSummaryGetByPostQuantumParamsIPVersionIPv6 RadarHTTPSummaryGetByPostQuantumParamsIPVersion = "IPv6"
)

func (r RadarHTTPSummaryGetByPostQuantumParamsIPVersion) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByPostQuantumParamsIPVersionIPv4, RadarHTTPSummaryGetByPostQuantumParamsIPVersionIPv6:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByPostQuantumParamsO string

const (
	RadarHTTPSummaryGetByPostQuantumParamsOWindows  RadarHTTPSummaryGetByPostQuantumParamsO = "WINDOWS"
	RadarHTTPSummaryGetByPostQuantumParamsOMacosx   RadarHTTPSummaryGetByPostQuantumParamsO = "MACOSX"
	RadarHTTPSummaryGetByPostQuantumParamsOIos      RadarHTTPSummaryGetByPostQuantumParamsO = "IOS"
	RadarHTTPSummaryGetByPostQuantumParamsOAndroid  RadarHTTPSummaryGetByPostQuantumParamsO = "ANDROID"
	RadarHTTPSummaryGetByPostQuantumParamsOChromeos RadarHTTPSummaryGetByPostQuantumParamsO = "CHROMEOS"
	RadarHTTPSummaryGetByPostQuantumParamsOLinux    RadarHTTPSummaryGetByPostQuantumParamsO = "LINUX"
	RadarHTTPSummaryGetByPostQuantumParamsOSmartTv  RadarHTTPSummaryGetByPostQuantumParamsO = "SMART_TV"
)

func (r RadarHTTPSummaryGetByPostQuantumParamsO) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByPostQuantumParamsOWindows, RadarHTTPSummaryGetByPostQuantumParamsOMacosx, RadarHTTPSummaryGetByPostQuantumParamsOIos, RadarHTTPSummaryGetByPostQuantumParamsOAndroid, RadarHTTPSummaryGetByPostQuantumParamsOChromeos, RadarHTTPSummaryGetByPostQuantumParamsOLinux, RadarHTTPSummaryGetByPostQuantumParamsOSmartTv:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByPostQuantumParamsTlsVersion string

const (
	RadarHTTPSummaryGetByPostQuantumParamsTlsVersionTlSv1_0  RadarHTTPSummaryGetByPostQuantumParamsTlsVersion = "TLSv1_0"
	RadarHTTPSummaryGetByPostQuantumParamsTlsVersionTlSv1_1  RadarHTTPSummaryGetByPostQuantumParamsTlsVersion = "TLSv1_1"
	RadarHTTPSummaryGetByPostQuantumParamsTlsVersionTlSv1_2  RadarHTTPSummaryGetByPostQuantumParamsTlsVersion = "TLSv1_2"
	RadarHTTPSummaryGetByPostQuantumParamsTlsVersionTlSv1_3  RadarHTTPSummaryGetByPostQuantumParamsTlsVersion = "TLSv1_3"
	RadarHTTPSummaryGetByPostQuantumParamsTlsVersionTlSvQuic RadarHTTPSummaryGetByPostQuantumParamsTlsVersion = "TLSvQUIC"
)

func (r RadarHTTPSummaryGetByPostQuantumParamsTlsVersion) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByPostQuantumParamsTlsVersionTlSv1_0, RadarHTTPSummaryGetByPostQuantumParamsTlsVersionTlSv1_1, RadarHTTPSummaryGetByPostQuantumParamsTlsVersionTlSv1_2, RadarHTTPSummaryGetByPostQuantumParamsTlsVersionTlSv1_3, RadarHTTPSummaryGetByPostQuantumParamsTlsVersionTlSvQuic:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByTlsVersionParams struct {
	// Filters results by Autonomous System. Specify one or more Autonomous System
	// Numbers (ASNs) as a comma-separated list. Prefix with `-` to exclude ASNs from
	// results. For example, `-174, 3356` excludes results from AS174, but includes
	// results from AS3356.
	Asn param.Field[[]string] `query:"asn"`
	// Filters results by bot class. Refer to
	// [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/).
	BotClass param.Field[[]RadarHTTPSummaryGetByTlsVersionParamsBotClass] `query:"botClass"`
	// Filters results by browser family.
	BrowserFamily param.Field[[]RadarHTTPSummaryGetByTlsVersionParamsBrowserFamily] `query:"browserFamily"`
	// Filters results by continent. Specify a comma-separated list of alpha-2 codes.
	// Prefix with `-` to exclude continents from results. For example, `-EU,NA`
	// excludes results from EU, but includes results from NA.
	Continent param.Field[[]string] `query:"continent"`
	// End of the date range (inclusive).
	DateEnd param.Field[[]time.Time] `query:"dateEnd" format:"date-time"`
	// Filters results by date range. For example, use `7d` and `7dcontrol` to compare
	// this week with the previous week. Use this parameter or set specific start and
	// end dates (`dateStart` and `dateEnd` parameters).
	DateRange param.Field[[]string] `query:"dateRange"`
	// Start of the date range.
	DateStart param.Field[[]time.Time] `query:"dateStart" format:"date-time"`
	// Filters results by device type.
	DeviceType param.Field[[]RadarHTTPSummaryGetByTlsVersionParamsDeviceType] `query:"deviceType"`
	// Format in which results will be returned.
	Format param.Field[RadarHTTPSummaryGetByTlsVersionParamsFormat] `query:"format"`
	// Filters results by HTTP protocol (HTTP vs. HTTPS).
	HTTPProtocol param.Field[[]RadarHTTPSummaryGetByTlsVersionParamsHTTPProtocol] `query:"httpProtocol"`
	// Filters results by HTTP version.
	HTTPVersion param.Field[[]RadarHTTPSummaryGetByTlsVersionParamsHTTPVersion] `query:"httpVersion"`
	// Filters results by IP version (Ipv4 vs. IPv6).
	IPVersion param.Field[[]RadarHTTPSummaryGetByTlsVersionParamsIPVersion] `query:"ipVersion"`
	// Filters results by location. Specify a comma-separated list of alpha-2 codes.
	// Prefix with `-` to exclude locations from results. For example, `-US,PT`
	// excludes results from the US, but includes results from PT.
	Location param.Field[[]string] `query:"location"`
	// Array of names used to label the series in the response.
	Name param.Field[[]string] `query:"name"`
	// Filters results by operating system.
	Os param.Field[[]RadarHTTPSummaryGetByTlsVersionParamsO] `query:"os"`
}

// URLQuery serializes [RadarHTTPSummaryGetByTlsVersionParams]'s query parameters
// as `url.Values`.
func (r RadarHTTPSummaryGetByTlsVersionParams) URLQuery() (v url.Values) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type RadarHTTPSummaryGetByTlsVersionParamsBotClass string

const (
	RadarHTTPSummaryGetByTlsVersionParamsBotClassLikelyAutomated RadarHTTPSummaryGetByTlsVersionParamsBotClass = "LIKELY_AUTOMATED"
	RadarHTTPSummaryGetByTlsVersionParamsBotClassLikelyHuman     RadarHTTPSummaryGetByTlsVersionParamsBotClass = "LIKELY_HUMAN"
)

func (r RadarHTTPSummaryGetByTlsVersionParamsBotClass) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByTlsVersionParamsBotClassLikelyAutomated, RadarHTTPSummaryGetByTlsVersionParamsBotClassLikelyHuman:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByTlsVersionParamsBrowserFamily string

const (
	RadarHTTPSummaryGetByTlsVersionParamsBrowserFamilyChrome  RadarHTTPSummaryGetByTlsVersionParamsBrowserFamily = "CHROME"
	RadarHTTPSummaryGetByTlsVersionParamsBrowserFamilyEdge    RadarHTTPSummaryGetByTlsVersionParamsBrowserFamily = "EDGE"
	RadarHTTPSummaryGetByTlsVersionParamsBrowserFamilyFirefox RadarHTTPSummaryGetByTlsVersionParamsBrowserFamily = "FIREFOX"
	RadarHTTPSummaryGetByTlsVersionParamsBrowserFamilySafari  RadarHTTPSummaryGetByTlsVersionParamsBrowserFamily = "SAFARI"
)

func (r RadarHTTPSummaryGetByTlsVersionParamsBrowserFamily) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByTlsVersionParamsBrowserFamilyChrome, RadarHTTPSummaryGetByTlsVersionParamsBrowserFamilyEdge, RadarHTTPSummaryGetByTlsVersionParamsBrowserFamilyFirefox, RadarHTTPSummaryGetByTlsVersionParamsBrowserFamilySafari:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByTlsVersionParamsDeviceType string

const (
	RadarHTTPSummaryGetByTlsVersionParamsDeviceTypeDesktop RadarHTTPSummaryGetByTlsVersionParamsDeviceType = "DESKTOP"
	RadarHTTPSummaryGetByTlsVersionParamsDeviceTypeMobile  RadarHTTPSummaryGetByTlsVersionParamsDeviceType = "MOBILE"
	RadarHTTPSummaryGetByTlsVersionParamsDeviceTypeOther   RadarHTTPSummaryGetByTlsVersionParamsDeviceType = "OTHER"
)

func (r RadarHTTPSummaryGetByTlsVersionParamsDeviceType) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByTlsVersionParamsDeviceTypeDesktop, RadarHTTPSummaryGetByTlsVersionParamsDeviceTypeMobile, RadarHTTPSummaryGetByTlsVersionParamsDeviceTypeOther:
		return true
	}
	return false
}

// Format in which results will be returned.
type RadarHTTPSummaryGetByTlsVersionParamsFormat string

const (
	RadarHTTPSummaryGetByTlsVersionParamsFormatJson RadarHTTPSummaryGetByTlsVersionParamsFormat = "JSON"
	RadarHTTPSummaryGetByTlsVersionParamsFormatCsv  RadarHTTPSummaryGetByTlsVersionParamsFormat = "CSV"
)

func (r RadarHTTPSummaryGetByTlsVersionParamsFormat) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByTlsVersionParamsFormatJson, RadarHTTPSummaryGetByTlsVersionParamsFormatCsv:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByTlsVersionParamsHTTPProtocol string

const (
	RadarHTTPSummaryGetByTlsVersionParamsHTTPProtocolHTTP  RadarHTTPSummaryGetByTlsVersionParamsHTTPProtocol = "HTTP"
	RadarHTTPSummaryGetByTlsVersionParamsHTTPProtocolHTTPS RadarHTTPSummaryGetByTlsVersionParamsHTTPProtocol = "HTTPS"
)

func (r RadarHTTPSummaryGetByTlsVersionParamsHTTPProtocol) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByTlsVersionParamsHTTPProtocolHTTP, RadarHTTPSummaryGetByTlsVersionParamsHTTPProtocolHTTPS:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByTlsVersionParamsHTTPVersion string

const (
	RadarHTTPSummaryGetByTlsVersionParamsHTTPVersionHttPv1 RadarHTTPSummaryGetByTlsVersionParamsHTTPVersion = "HTTPv1"
	RadarHTTPSummaryGetByTlsVersionParamsHTTPVersionHttPv2 RadarHTTPSummaryGetByTlsVersionParamsHTTPVersion = "HTTPv2"
	RadarHTTPSummaryGetByTlsVersionParamsHTTPVersionHttPv3 RadarHTTPSummaryGetByTlsVersionParamsHTTPVersion = "HTTPv3"
)

func (r RadarHTTPSummaryGetByTlsVersionParamsHTTPVersion) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByTlsVersionParamsHTTPVersionHttPv1, RadarHTTPSummaryGetByTlsVersionParamsHTTPVersionHttPv2, RadarHTTPSummaryGetByTlsVersionParamsHTTPVersionHttPv3:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByTlsVersionParamsIPVersion string

const (
	RadarHTTPSummaryGetByTlsVersionParamsIPVersionIPv4 RadarHTTPSummaryGetByTlsVersionParamsIPVersion = "IPv4"
	RadarHTTPSummaryGetByTlsVersionParamsIPVersionIPv6 RadarHTTPSummaryGetByTlsVersionParamsIPVersion = "IPv6"
)

func (r RadarHTTPSummaryGetByTlsVersionParamsIPVersion) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByTlsVersionParamsIPVersionIPv4, RadarHTTPSummaryGetByTlsVersionParamsIPVersionIPv6:
		return true
	}
	return false
}

type RadarHTTPSummaryGetByTlsVersionParamsO string

const (
	RadarHTTPSummaryGetByTlsVersionParamsOWindows  RadarHTTPSummaryGetByTlsVersionParamsO = "WINDOWS"
	RadarHTTPSummaryGetByTlsVersionParamsOMacosx   RadarHTTPSummaryGetByTlsVersionParamsO = "MACOSX"
	RadarHTTPSummaryGetByTlsVersionParamsOIos      RadarHTTPSummaryGetByTlsVersionParamsO = "IOS"
	RadarHTTPSummaryGetByTlsVersionParamsOAndroid  RadarHTTPSummaryGetByTlsVersionParamsO = "ANDROID"
	RadarHTTPSummaryGetByTlsVersionParamsOChromeos RadarHTTPSummaryGetByTlsVersionParamsO = "CHROMEOS"
	RadarHTTPSummaryGetByTlsVersionParamsOLinux    RadarHTTPSummaryGetByTlsVersionParamsO = "LINUX"
	RadarHTTPSummaryGetByTlsVersionParamsOSmartTv  RadarHTTPSummaryGetByTlsVersionParamsO = "SMART_TV"
)

func (r RadarHTTPSummaryGetByTlsVersionParamsO) IsKnown() bool {
	switch r {
	case RadarHTTPSummaryGetByTlsVersionParamsOWindows, RadarHTTPSummaryGetByTlsVersionParamsOMacosx, RadarHTTPSummaryGetByTlsVersionParamsOIos, RadarHTTPSummaryGetByTlsVersionParamsOAndroid, RadarHTTPSummaryGetByTlsVersionParamsOChromeos, RadarHTTPSummaryGetByTlsVersionParamsOLinux, RadarHTTPSummaryGetByTlsVersionParamsOSmartTv:
		return true
	}
	return false
}
